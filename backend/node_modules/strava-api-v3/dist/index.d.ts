/**
 * A set of rolled-up statistics and totals for an athlete
 */
interface IActivitiesStats {
    biggest_ride_distance?: number;
    biggest_climb_elevation_gain?: number;
    recent_ride_totals?: IActivityTotal;
    recent_run_totals?: IActivityTotal;
    recent_swim_totals?: IActivityTotal;
    ytd_ride_totals?: IActivityTotal;
    ytd_run_totals?: IActivityTotal;
    ytd_swim_totals?: IActivityTotal;
    all_ride_totals?: IActivityTotal;
    all_run_totals?: IActivityTotal;
    all_swim_totals?: IActivityTotal;
}
/**
 * A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
 */
interface IActivityTotal {
    count: number;
    distance: number;
    moving_time: number;
    elapsed_time: number;
    elevation_gain: number;
    achievement_count?: number;
}
/**
 * An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
 * https://developers.strava.com/docs/reference/#api-models-ActivityType
 */
type TActivityType = 'AlpineSki' | 'BackcountrySki' | 'Canoeing' | 'Crossfit' | 'EBikeRide' | 'Elliptical' | 'Golf' | 'Handcycle' | 'Hike' | 'IceSkate' | 'InlineSkate' | 'Kayaking' | 'Kitesurf' | 'NordicSki' | 'Ride' | 'RockClimbing' | 'RollerSki' | 'Rowing' | 'Run' | 'Sail' | 'Skateboard' | 'Snowboard' | 'Snowshoe' | 'Soccer' | 'StairStepper' | 'StandUpPaddling' | 'Surfing' | 'Swim' | 'Velomobile' | 'VirtualRide' | 'VirtualRun' | 'Walk' | 'WeightTraining' | 'Wheelchair' | 'Windsurf' | 'Workout' | 'Yoga';
interface IStreamRouteSetCorrect {
    type: "latlng" | "altitude" | "distance";
    data: number[];
}
type TKeysPossibleType = 'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth';
interface IStreamActivitiesSetCorrect {
    type: "latlng" | "altitude" | "distance" | any;
    data: number[];
    series_type: TKeysPossibleType;
    original_size: number;
    resolution: "hight";
}
interface ISummaryPRSegmentEffort {
    id?: number;
    activity_id?: number;
    elapsed_time?: number;
    distance?: number;
    start_date?: string;
    start_date_local?: string;
    is_kom?: boolean;
    pr_activity_id?: number;
    pr_elapsed_time?: number;
    pr_date?: string;
    effort_count?: number;
}
/**
 * ...
 */
interface IActivityZone {
    score: number;
    distribution_buckets: string;
    type: string;
    sensor_based: boolean;
    points: number;
    custom_zones: boolean;
    max: number;
}
interface IBaseStream {
    original_size: number;
    resolution: string;
    series_type: string;
}
interface IClubActivity {
    resource_state: number;
    athlete: IMetaAthlete;
    name: string;
    distance: number;
    moving_time: number;
    elapsed_time: number;
    total_elevation_gain: number;
    type: TActivityType;
    sport_type: TSportType;
    workout_type?: number | null;
}
interface IClubAthlete {
    resource_state: 1 | 2 | 3;
    firstname: string;
    lastname: string;
    admin: boolean;
    owner: boolean;
    membership: 'member' | 'admin';
}
interface IClubComment {
    id: number;
    activity_id: number;
    text: string;
    athlete: ISummaryAthlete;
    created_at: string;
}
interface IError {
    code: string;
    field: string;
    resource: string;
}
interface ExplorerSegment {
    id: number;
    name: string;
    climb_category: "NG" | 0 | 1 | 2 | 3 | 4 | 5 | "LG";
    climb_category_desc: string;
    avg_grade: number;
    start_latlng: TLatLng;
    end_latlng: TLatLng;
    elev_difference: number;
    distance: number;
    points: string;
}
/**
 * Encapsulates the errors that may be returned from the API.
 */
interface IFault {
    errors: IError;
    message: string;
}
interface IHeartRateZoneRanges {
    custom_zones: boolean;
    zones: IZoneRanges;
}
/**
 *
 */
interface ILap {
    id: number;
    resource_state?: number;
    device_watts?: boolean;
    average_watts?: number;
    average_heartrate?: number;
    max_heartrate?: number;
    activity: IMetaActivity;
    athlete: IMetaAthlete;
    average_cadence: number;
    average_speed: number;
    distance: number;
    elapsed_time: number;
    start_index: number;
    end_index: number;
    lap_index: number;
    max_speed: number;
    moving_time: number;
    name: string;
    pace_zone: number;
    split: number;
    start_date: string;
    start_date_local: string;
    total_elevation_gain: number;
}
/**
 * A collection of float objects. A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 */
type TLatLng = [latitude: number, longitude: number];
interface IMetaActivity {
    id: number;
    visibility?: string | 'everyone';
    resource_state?: number;
}
interface IMetaAthlete {
    id?: number;
    resource_state?: number;
    firstname?: string;
    lastname?: string;
}
interface IMetaClub {
    id: number;
    resource_state: number;
    name: string;
}
interface IExplorerResponse {
    segments: IExplorerSegment[];
}
interface IExplorerSegment {
    id: number;
    resource_state?: number;
    starred?: boolean;
    elevation_profile?: string;
    local_legend_enabled?: boolean;
    name: string;
    climb_category: number;
    climb_category_desc: string;
    avg_grade: number;
    start_latlng: TLatLng;
    end_latlng: TLatLng;
    elev_difference: number;
    distance: number;
    points: string;
}
interface IPhotosSummary {
    count: number;
    primary: IPhotosSummaryPrimary;
}
interface IPhotosSummaryPrimary {
    id: number;
    source: number;
    unique_id: string;
    urls: string;
}
interface IPolylineMap {
    id: string;
    polyline: string;
    summary_polyline?: string;
    resource_state?: number;
}
interface IPowerZoneRanges {
    zones: IZoneRanges;
}
interface IRoute {
    athlete: ISummaryAthlete;
    description: string | null;
    distance: number;
    elevation_gain: number;
    id: number;
    id_str: string;
    map: IPolylineMap;
    map_urls?: {
        url: string;
        retina_url: string;
    };
    resource_state?: number;
    name: string;
    private: boolean;
    starred: boolean;
    timestamp: number;
    type: number;
    sub_type: number;
    created_at: string;
    updated_at: string;
    estimated_moving_time: number;
    segments: ISummarySegment[];
    waypoints: IWaypoint[];
}
interface ISplit {
    average_speed: number;
    distance: number;
    elapsed_time: number;
    elevation_difference: number;
    pace_zone: number;
    moving_time: number;
    split: number;
}
type TSportType = 'AlpineSki' | 'BackcountrySki' | 'Badminton' | 'Canoeing' | 'Crossfit' | 'EBikeRide' | 'Elliptical' | 'EMountainBikeRide' | 'Golf' | 'GravelRide' | 'Handcycle' | 'HighIntensityIntervalTraining' | 'Hike' | 'IceSkate' | 'InlineSkate' | 'Kayaking' | 'Kitesurf' | 'MountainBikeRide' | 'NordicSki' | 'Pickleball' | 'Pilates' | 'Racquetball' | 'Ride' | 'RockClimbing' | 'RollerSki' | 'Rowing' | 'Run' | 'Sail' | 'Skateboard' | 'Snowboard' | 'Snowshoe' | 'Soccer' | 'Squash' | 'StairStepper' | 'StandUpPaddling' | 'Surfing' | 'Swim' | 'TableTennis' | 'Tennis' | 'TrailRun' | 'Velomobile' | 'VirtualRide' | 'VirtualRow' | 'VirtualRun' | 'Walk' | 'WeightTraining' | 'Wheelchair' | 'Windsurf' | 'Workout' | 'Yoga';
interface ISummarySegment {
    id: number;
    resource_state?: number;
    elevation_profile?: null | any;
    hazardous?: boolean;
    starred?: boolean;
    name: string;
    activity_type?: string;
    distance?: number;
    average_grade?: number;
    maximum_grade?: number;
    elevation_high?: number;
    elevation_low?: number;
    start_latlng?: TLatLng;
    end_latlng?: TLatLng;
    climb_category?: number;
    city?: string;
    state?: string;
    country?: string;
    private?: boolean;
    athlete_pr_effort?: ISummaryPRSegmentEffort;
    athlete_segment_stats?: ISummarySegmentEffort;
    pr_time?: number;
    starred_date?: string;
}
interface ISummarySegmentEffort {
    id?: number;
    activity_id?: number;
    elapsed_time?: number;
    start_date?: string;
    start_date_local?: string;
    distance?: number;
    is_kom?: boolean;
    pr_elapsed_time?: number;
    pr_date?: string;
    pr_visibility?: string;
    pr_activity_id?: number;
    pr_activity_visibility?: string;
    effort_count?: number;
}
interface IUpdatableActivity {
    commute: boolean;
    trainer: boolean;
    hide_from_home: boolean;
    description: string;
    name: string;
    type: TActivityType;
    sport_type: TSportType;
    gear_id: string;
}
interface IUpload {
    id: number;
    id_str: string;
    external_id: string;
    error: string;
    status: string;
    activity_id: number;
}
interface IWaypoint {
    latlng: TLatLng;
    target_latlng: TLatLng;
    categories: string;
    title: string;
    description: string;
    distance_into_route: number;
}
interface IZoneRange {
    min: number;
    max: number;
}
type IZoneRanges = IZoneRange[];
interface IZone {
    heart_rate: IHeartRateZoneRanges;
    power?: IPowerZoneRanges;
}
interface IDetailedGear {
    id: string;
    resource_state: number;
    primary: boolean;
    name: string;
    distance: number;
    brand_name: string;
    model_name: string;
    frame_type: number;
    description: string;
}
interface IDetailedSegment {
    id: number;
    resource_state?: number;
    elevation_profile?: string | null;
    starred?: boolean;
    name: string;
    activity_type: string;
    distance: number;
    average_grade: number;
    maximum_grade: number;
    elevation_high: number;
    elevation_low: number;
    start_latlng: TLatLng;
    end_latlng: TLatLng;
    climb_category: number;
    city: string;
    state: string;
    country: string;
    private: boolean;
    athlete_pr_effort?: ISummaryPRSegmentEffort;
    athlete_segment_stats: ISummarySegmentEffort;
    created_at: string;
    updated_at: string;
    total_elevation_gain: number;
    map: IPolylineMap;
    effort_count: number;
    athlete_count: number;
    hazardous: boolean;
    star_count: number;
    pr_time?: number;
    xoms?: {
        kom?: string;
        qom?: string;
        overall?: string;
        destination?: {
            href?: string;
            type?: string;
            name?: string;
        };
    };
    local_legend?: {
        athlete_id?: number;
        title?: string;
        profile?: string;
        effort_description?: string;
        effort_count?: string;
        effort_counts?: {
            overall?: string;
            female?: string;
        };
        destination?: string;
    };
}
interface IDetailedSegmentEffort {
    id: number;
    resource_state?: number;
    activity_id?: number;
    elapsed_time?: number;
    start_date?: string;
    start_date_local?: string;
    distance?: number;
    is_kom?: boolean;
    name?: string;
    activity?: IMetaActivity;
    athlete?: IMetaAthlete;
    moving_time?: number;
    start_index?: number;
    end_index?: number;
    average_cadence?: number;
    average_watts?: number;
    device_watts?: boolean;
    average_heartrate?: number;
    max_heartrate?: number;
    segment?: ISummarySegment;
    kom_rank?: number | null;
    pr_rank?: number;
    hidden?: boolean;
    achievements?: any;
    visibility?: any;
}
interface IGenericStream<T> {
    original_size: number;
    resolution: string;
    series_type: string;
    data: T[];
}
interface ITimeStream extends IGenericStream<number> {
}
interface IDistanceStream extends IGenericStream<number> {
}
interface IHeartrateStream extends IGenericStream<number> {
}
interface ILatLngStream extends IGenericStream<TLatLng> {
}
interface IMovingStream extends IGenericStream<boolean> {
}
interface IPowerStream extends IGenericStream<number> {
}
interface ISmoothGradeStream extends IGenericStream<number> {
}
interface ISmoothVelocityStream extends IGenericStream<number> {
}
interface IAltitudeStream extends IGenericStream<number> {
}
interface ICadenceStream extends IGenericStream<number> {
}
interface ITemperatureStream extends IGenericStream<number> {
}
type IStreamSet = {
    time?: ITimeStream;
    distance?: IDistanceStream;
    latlng?: ILatLngStream;
    altitude?: IAltitudeStream;
    velocity_smooth?: ISmoothVelocityStream;
    heartrate?: IHeartrateStream;
    cadence?: ICadenceStream;
    watts?: IPowerStream;
    temp?: ITemperatureStream;
    moving?: IMovingStream;
    grade_smooth?: ISmoothGradeStream;
};
interface ISummaryActivity {
    id: number;
    external_id: string;
    upload_id: number;
    athlete: IMetaAthlete;
    name: string;
    distance: number;
    moving_time: number;
    elapsed_time: number;
    total_elevation_gain: number;
    elev_high: number;
    elev_low: number;
    type: TActivityType;
    sport_type: TSportType;
    start_date: string;
    start_date_local: string;
    timezone: string;
    start_latlng: TLatLng;
    end_latlng: TLatLng;
    achievement_count: number;
    kudos_count: number;
    comment_count: number;
    athlete_count: number;
    photo_count: number;
    total_photo_count: number;
    map: IPolylineMap;
    trainer: boolean;
    commute: boolean;
    manual: boolean;
    private: boolean;
    flagged: boolean;
    workout_type: number;
    upload_id_str: string;
    average_speed: number;
    max_speed: number;
    has_kudoed: boolean;
    hide_from_home: boolean;
    gear_id: string;
    kilojoules: number;
    average_watts: number;
    device_watts: boolean;
    max_watts: number;
    weighted_average_watts: number;
}
interface ISummaryAthlete {
    id?: number;
    username?: null | string;
    bio?: null | string;
    badge_type_id?: number;
    weight?: number;
    friend?: null | any;
    follower?: null | any;
    resource_state: number;
    firstname: string;
    lastname: string;
    profile_medium?: string;
    profile?: string;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    sex?: "M" | "F";
    premium?: boolean;
    summit?: boolean;
    created_at?: string;
    updated_at?: string;
}
interface ISummaryClub {
    id: number;
    profile: string;
    resource_state: number;
    name: string;
    profile_medium: string;
    cover_photo: string | null;
    cover_photo_small: string | null;
    sport_type?: string;
    activity_types: TActivityType[];
    activity_types_icon: string;
    dimensions: string[];
    localized_sport_type: string | "Multysport";
    city: string;
    state: string;
    country: string;
    private: boolean;
    member_count: number;
    featured: boolean;
    verified: boolean;
    url: string;
}
/**
 * A union type representing the time spent in a given zone.
 */
interface ITimedZoneRange {
    min: number;
    max: number;
    time: number;
}
interface IDetailedActivity {
    id: number;
    external_id: string;
    upload_id: number;
    athlete: IMetaAthlete;
    name: string;
    distance: number;
    moving_time: number;
    elapsed_time: number;
    total_elevation_gain: number;
    elev_high: number;
    elev_low: number;
    type?: TActivityType;
    sport_type: TSportType;
    start_date: string;
    start_date_local: string;
    timezone: string;
    start_latlng: TLatLng;
    end_latlng: TLatLng;
    achievement_count: number;
    kudos_count: number;
    comment_count: number;
    athlete_count: number;
    photo_count: number;
    total_photo_count: number;
    map: IPolylineMap;
    trainer: boolean;
    commute: boolean;
    manual: boolean;
    private: boolean;
    flagged: boolean;
    workout_type: number;
    upload_id_str: string;
    average_speed: number;
    max_speed: number;
    has_kudoed: boolean;
    hide_from_home: boolean;
    gear_id: string;
    kilojoules: number;
    average_watts: number;
    device_watts: boolean;
    max_watts: number;
    weighted_average_watts: number;
    description: string;
    photos: IPhotosSummary;
    gear: ISummaryGear;
    calories: number;
    segment_efforts: IDetailedSegmentEffort;
    device_name: string;
    embed_token: string;
    splits_metric: ISplit;
    splits_standard: ISplit;
    laps: ILap[];
    best_efforts: IDetailedSegmentEffort;
}
interface IDetailedAthlete {
    id: number;
    username: string | null;
    resource_state: number;
    firstname: string;
    lastname: string;
    bio: string | null;
    profile_medium: string;
    profile: string;
    city: string;
    state: string;
    country: string | null;
    sex: "M" | "F";
    premium: boolean;
    summit: boolean;
    created_at: string;
    updated_at: string;
    badge_type_id: null | number;
    friend: any | null;
    follower: any | null;
    follower_count?: number;
    friend_count?: number;
    measurement_preference?: string;
    ftp?: number;
    weight: number;
    clubs?: ISummaryClub;
    bikes?: ISummaryGear;
    shoes?: ISummaryGear;
}
interface IDetailedClub {
    id: number;
    resource_state: number;
    name: string;
    profile_medium: string;
    cover_photo: string;
    cover_photo_small: string;
    sport_type: string;
    activity_types: TActivityType[];
    profile: string;
    activity_types_icon: string;
    dimensions: string[];
    description: string;
    club_type: string;
    website: string;
    localized_sport_type: string;
    city: string;
    state: string;
    country: string;
    private: boolean;
    member_count: number;
    featured: boolean;
    verified: boolean;
    url: string;
    membership: string;
    admin: boolean;
    owner: boolean;
    following_count: number;
}
interface IAthlete {
    id: number;
    resource_state: 1 | 2 | 3;
    firstname: string;
    lastname: string;
    profile_medium: string;
    profile: string;
    city: string;
    state: string;
    country: string;
    sex: "M" | "F";
    premium: boolean;
    summit: boolean;
    created_at: string;
    updated_at: string;
    follower_count: number;
    friend_count: number;
    measurement_preference: string;
    ftp?: number;
    weight: number;
    clubs?: ISummaryClub;
    bikes?: ISummaryGear;
    shoes?: ISummaryGear;
}
interface ISummaryGear {
    id: string;
    resource_state: number;
    primary: boolean;
    name: string;
    distance: number;
}
interface ISummaryGear {
    id: string;
    resource_state: number;
    primary: boolean;
    name: string;
    distance: number;
}
interface IComment {
    id: number;
    post_id?: null | number;
    resource_state?: number;
    mentions_metadata?: null | string;
    cursor?: null | string;
    reaction_count?: null | number;
    has_reacted?: boolean | null;
    activity_id: number;
    text: string;
    athlete: ISummaryAthlete;
    created_at: string;
}

type strava_entity_ExplorerSegment = ExplorerSegment;
type strava_entity_IActivitiesStats = IActivitiesStats;
type strava_entity_IActivityTotal = IActivityTotal;
type strava_entity_IActivityZone = IActivityZone;
type strava_entity_IAltitudeStream = IAltitudeStream;
type strava_entity_IAthlete = IAthlete;
type strava_entity_IBaseStream = IBaseStream;
type strava_entity_ICadenceStream = ICadenceStream;
type strava_entity_IClubActivity = IClubActivity;
type strava_entity_IClubAthlete = IClubAthlete;
type strava_entity_IClubComment = IClubComment;
type strava_entity_IComment = IComment;
type strava_entity_IDetailedActivity = IDetailedActivity;
type strava_entity_IDetailedAthlete = IDetailedAthlete;
type strava_entity_IDetailedClub = IDetailedClub;
type strava_entity_IDetailedGear = IDetailedGear;
type strava_entity_IDetailedSegment = IDetailedSegment;
type strava_entity_IDetailedSegmentEffort = IDetailedSegmentEffort;
type strava_entity_IDistanceStream = IDistanceStream;
type strava_entity_IError = IError;
type strava_entity_IExplorerResponse = IExplorerResponse;
type strava_entity_IExplorerSegment = IExplorerSegment;
type strava_entity_IFault = IFault;
type strava_entity_IGenericStream<T> = IGenericStream<T>;
type strava_entity_IHeartRateZoneRanges = IHeartRateZoneRanges;
type strava_entity_IHeartrateStream = IHeartrateStream;
type strava_entity_ILap = ILap;
type strava_entity_ILatLngStream = ILatLngStream;
type strava_entity_IMetaActivity = IMetaActivity;
type strava_entity_IMetaAthlete = IMetaAthlete;
type strava_entity_IMetaClub = IMetaClub;
type strava_entity_IMovingStream = IMovingStream;
type strava_entity_IPhotosSummary = IPhotosSummary;
type strava_entity_IPhotosSummaryPrimary = IPhotosSummaryPrimary;
type strava_entity_IPolylineMap = IPolylineMap;
type strava_entity_IPowerStream = IPowerStream;
type strava_entity_IPowerZoneRanges = IPowerZoneRanges;
type strava_entity_IRoute = IRoute;
type strava_entity_ISmoothGradeStream = ISmoothGradeStream;
type strava_entity_ISmoothVelocityStream = ISmoothVelocityStream;
type strava_entity_ISplit = ISplit;
type strava_entity_IStreamActivitiesSetCorrect = IStreamActivitiesSetCorrect;
type strava_entity_IStreamRouteSetCorrect = IStreamRouteSetCorrect;
type strava_entity_IStreamSet = IStreamSet;
type strava_entity_ISummaryActivity = ISummaryActivity;
type strava_entity_ISummaryAthlete = ISummaryAthlete;
type strava_entity_ISummaryClub = ISummaryClub;
type strava_entity_ISummaryGear = ISummaryGear;
type strava_entity_ISummaryPRSegmentEffort = ISummaryPRSegmentEffort;
type strava_entity_ISummarySegment = ISummarySegment;
type strava_entity_ISummarySegmentEffort = ISummarySegmentEffort;
type strava_entity_ITemperatureStream = ITemperatureStream;
type strava_entity_ITimeStream = ITimeStream;
type strava_entity_ITimedZoneRange = ITimedZoneRange;
type strava_entity_IUpdatableActivity = IUpdatableActivity;
type strava_entity_IUpload = IUpload;
type strava_entity_IWaypoint = IWaypoint;
type strava_entity_IZone = IZone;
type strava_entity_IZoneRange = IZoneRange;
type strava_entity_IZoneRanges = IZoneRanges;
type strava_entity_TActivityType = TActivityType;
type strava_entity_TKeysPossibleType = TKeysPossibleType;
type strava_entity_TLatLng = TLatLng;
declare namespace strava_entity {
  export type { strava_entity_ExplorerSegment as ExplorerSegment, strava_entity_IActivitiesStats as IActivitiesStats, strava_entity_IActivityTotal as IActivityTotal, strava_entity_IActivityZone as IActivityZone, strava_entity_IAltitudeStream as IAltitudeStream, strava_entity_IAthlete as IAthlete, strava_entity_IBaseStream as IBaseStream, strava_entity_ICadenceStream as ICadenceStream, strava_entity_IClubActivity as IClubActivity, strava_entity_IClubAthlete as IClubAthlete, strava_entity_IClubComment as IClubComment, strava_entity_IComment as IComment, strava_entity_IDetailedActivity as IDetailedActivity, strava_entity_IDetailedAthlete as IDetailedAthlete, strava_entity_IDetailedClub as IDetailedClub, strava_entity_IDetailedGear as IDetailedGear, strava_entity_IDetailedSegment as IDetailedSegment, strava_entity_IDetailedSegmentEffort as IDetailedSegmentEffort, strava_entity_IDistanceStream as IDistanceStream, strava_entity_IError as IError, strava_entity_IExplorerResponse as IExplorerResponse, strava_entity_IExplorerSegment as IExplorerSegment, strava_entity_IFault as IFault, strava_entity_IGenericStream as IGenericStream, strava_entity_IHeartRateZoneRanges as IHeartRateZoneRanges, strava_entity_IHeartrateStream as IHeartrateStream, strava_entity_ILap as ILap, strava_entity_ILatLngStream as ILatLngStream, strava_entity_IMetaActivity as IMetaActivity, strava_entity_IMetaAthlete as IMetaAthlete, strava_entity_IMetaClub as IMetaClub, strava_entity_IMovingStream as IMovingStream, strava_entity_IPhotosSummary as IPhotosSummary, strava_entity_IPhotosSummaryPrimary as IPhotosSummaryPrimary, strava_entity_IPolylineMap as IPolylineMap, strava_entity_IPowerStream as IPowerStream, strava_entity_IPowerZoneRanges as IPowerZoneRanges, strava_entity_IRoute as IRoute, strava_entity_ISmoothGradeStream as ISmoothGradeStream, strava_entity_ISmoothVelocityStream as ISmoothVelocityStream, strava_entity_ISplit as ISplit, strava_entity_IStreamActivitiesSetCorrect as IStreamActivitiesSetCorrect, strava_entity_IStreamRouteSetCorrect as IStreamRouteSetCorrect, strava_entity_IStreamSet as IStreamSet, strava_entity_ISummaryActivity as ISummaryActivity, strava_entity_ISummaryAthlete as ISummaryAthlete, strava_entity_ISummaryClub as ISummaryClub, strava_entity_ISummaryGear as ISummaryGear, strava_entity_ISummaryPRSegmentEffort as ISummaryPRSegmentEffort, strava_entity_ISummarySegment as ISummarySegment, strava_entity_ISummarySegmentEffort as ISummarySegmentEffort, strava_entity_ITemperatureStream as ITemperatureStream, strava_entity_ITimeStream as ITimeStream, strava_entity_ITimedZoneRange as ITimedZoneRange, strava_entity_IUpdatableActivity as IUpdatableActivity, strava_entity_IUpload as IUpload, strava_entity_IWaypoint as IWaypoint, strava_entity_IZone as IZone, strava_entity_IZoneRange as IZoneRange, strava_entity_IZoneRanges as IZoneRanges, strava_entity_TActivityType as TActivityType, strava_entity_TKeysPossibleType as TKeysPossibleType, strava_entity_TLatLng as TLatLng };
}

interface ICreateActivity {
    name: string;
    type?: string;
    sport_type: string;
    start_date_local: string;
    elapsed_time: number;
    description?: string;
    distance?: number;
    trainer?: number;
    commute?: number;
}
interface IGetActivityById {
    id: number;
    include_all_efforts?: boolean;
}
interface IGetActivityComments {
    id: number;
    page_size?: number;
    after_cursor?: string;
}
interface IGetKudoersByActivityId {
    id: number;
    page?: number;
    per_page?: number;
}
interface IGetLapsByActivityId {
    id: number;
}
interface IGetZonesByActivityId {
    id: number;
}
interface IUpdateActivityById {
    id: number;
    body: IUpdatableActivity;
}
interface IGetActivityStreams {
    id: number | string;
    keys: TKeysPossibleType[];
    key_by_type: boolean;
}
declare class StravaActivityApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    createActivity(props: ICreateActivity): Promise<IDetailedActivity>;
    /**
*
* Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
* @param props
* @returns
*/
    getActivityById(props: IGetActivityById): Promise<IDetailedActivity>;
    /**
 *
 * List Activity Comments (getCommentsByActivityId)
 * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 * @param props
 * @returns
 */
    getCommentsByActivityId(props: IGetActivityComments): Promise<IComment[]>;
    /**
* List Activity Kudoers (getKudoersByActivityId)
* Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
* @param props
* @returns
*/
    getKudoersByActivityId(props: IGetKudoersByActivityId): Promise<ISummaryAthlete[]>;
    /**
 *
 * List Activity Laps (getLapsByActivityId)
 * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 */
    getLapsByActivityId(props: IGetLapsByActivityId): Promise<ILap[]>;
    getZonesByActivityId(props: IGetZonesByActivityId): Promise<IActivityZone[]>;
    updateActivityById(props: IUpdateActivityById): Promise<IUpdatableActivity>;
    /**
     * Get Activity Streams (getActivityStreams)
     * Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     */
    getActivityStreams(props: IGetActivityStreams): Promise<IStreamSet>;
    getActivitiesGpxById(id: string | number): Promise<any>;
}

interface IGetLoggedInAthleteActivities {
    before?: number;
    after?: number;
    page: number;
    per_page: number;
}
interface IGetStats {
    id: number;
}
interface IUpdateLoggedInAthlete {
    weight: number;
}
interface IGetLoggedInAthleteClubs {
    page?: number;
    per_page?: number;
}
interface IGetRoutesByAthleteId {
    id: number;
    page: number;
    per_page: number;
}
declare class StravaAthleteApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    getLoggedInAthleteActivities(props: IGetLoggedInAthleteActivities): Promise<ISummaryActivity[]>;
    /**
     * Get Authenticated Athlete (getLoggedInAthlete)
     * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     * @returns
     */
    getLoggedInAthlete(): Promise<IDetailedAthlete>;
    /**
    * Get Zones (getLoggedInAthleteZones)
    * @returns Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.
    */
    getLoggedInAthleteZones(): Promise<IZone>;
    /**
    *
    * @param props
    * Get Athlete Stats (getStats)
    * Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
    * @returns
    */
    getStats(props: IGetStats): Promise<IActivitiesStats>;
    /**
    * Update Athlete (updateLoggedInAthlete)
    * Update the currently authenticated athlete. Requires profile:write scope.
    * @param props
    * @returns
    */
    updateLoggedInAthlete(props: IUpdateLoggedInAthlete): Promise<IDetailedAthlete>;
    /**
* Returns a list of the clubs whose membership includes the authenticated athlete.
*/
    getLoggedInAthleteClubs(props: IGetLoggedInAthleteClubs): Promise<ISummaryClub[]>;
    /**
 *  List Athlete Routes (getRoutesByAthleteId)
 * Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
 */
    getRoutesByAthleteId(props: IGetRoutesByAthleteId): Promise<IRoute[]>;
}

interface IGetClubActivitiesById {
    id: number;
    page?: number;
    per_page?: number;
}
interface IGetClubAdminsById {
    id: number;
    page?: number;
    per_page?: number;
}
interface IGetClubById {
    id: number;
}
interface IGetClubMembersById {
    id: number | string;
    page?: number;
    per_page?: number;
}
declare class StravaClubApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    getClubActivitiesById(props: IGetClubActivitiesById): Promise<IClubActivity[]>;
    /**
     *
     * @param props
     * @returns Returns a list of the administrators of a given club.
     */
    getClubAdminsById(props: IGetClubAdminsById): Promise<ISummaryAthlete[]>;
    getClubById(props: IGetClubById): Promise<IDetailedClub>;
    /**
     * Returns a list of the athletes who are members of a given club.
     */
    getClubMembersById(props: IGetClubMembersById): Promise<IClubAthlete[]>;
}

interface IGetGearById {
    id: string;
}
declare class StravaGearApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    /**
     * gear
     */
    getGearById(props: IGetGearById): Promise<IDetailedGear>;
}

interface IGetRouteAsGPX {
    id: string;
}
interface IGetRouteAsTCX {
    id: string;
}
interface IGetRouteById {
    id: string;
}
interface IGetRouteStreams {
    id: number | string;
}
declare class StravaRoutesApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    /**
     *
    * Export Route GPX (getRouteAsGPX)
    * Returns a GPX file of the route. Requires read_all scope for private routes.
    * @return gpx file ???
    */
    getRouteAsGPX(props: IGetRouteAsGPX): Promise<string>;
    /**
     * Export Route TCX (getRouteAsTCX)
     * Returns a TCX file of the route. Requires read_all scope for private routes.
     */
    getRouteAsTCX(props: IGetRouteAsTCX): Promise<string>;
    /**
     *  Get Route (getRouteById)
     * Returns a route using its identifier. Requires read_all scope for private routes.
     */
    getRouteById(props: IGetRouteById): Promise<IRoute>;
    /**
     * Get Route Streams (getRouteStreams)
     * Returns the given route's streams. Requires read_all scope for private routes.
     */
    getRouteStreams(props: IGetRouteStreams): Promise<IStreamRouteSetCorrect[]>;
}

interface IExploreSegments {
    bounds: string;
    activity_type?: string;
    min_cat?: number;
    max_cat?: number;
}
interface IGetLoggedInAthleteStarredSegments {
    page?: number;
    per_page?: number;
}
interface IGetSegmentById {
    id: number;
}
interface IStarSegment {
    id: number;
    starred: boolean;
}
type TKeysSegmentStreams = "distance" | "latlng" | "altitude";
type IStreamSetSegment = Pick<IStreamSet, "distance" | "latlng" | "altitude">;
interface IGetSegmentStreams {
    id: string;
    keys: TKeysSegmentStreams[];
    key_by_type: boolean;
}
declare class StravaSegmentApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    /**
     * Explore segments (exploreSegments)
    * Returns the top 10 segments matching a specified query.
     */
    exploreSegments(props: IExploreSegments): Promise<IExplorerResponse>;
    /**
     *  List Starred Segments (getLoggedInAthleteStarredSegments)
     * List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
     */
    getLoggedInAthleteStarredSegments(props?: IGetLoggedInAthleteStarredSegments): Promise<ISummarySegment[]>;
    /**
     * Get Segment (getSegmentById)
     * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
     */
    getSegmentById(props: IGetSegmentById): Promise<IDetailedSegment>;
    /**
     * Star Segment (starSegment)
     * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
     */
    starSegment(props: IStarSegment): Promise<IDetailedSegment>;
    /**
     * Get Segment Streams (getSegmentStreams)
     * Returns the given segment's streams. Requires read_all scope for private segments.
     */
    getSegmentStreams(props: IGetSegmentStreams): Promise<IStreamSetSegment>;
}

interface IGetEffortsBySegmentId {
    segment_id: number;
    start_date_local?: string;
    end_date_local?: string;
    per_page?: number;
}
interface IGetSegmentEffortById {
    id: number | string;
}
interface IGetSegmentEffortStreams {
    id: number | string;
    keys: TKeysPossibleType[];
    key_by_type: boolean;
}
declare class StravaSegmentEffortsApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    /**
* List Segment Efforts (getEffortsBySegmentId)
* Returns a set of the authenticated athlete's segment efforts for a given segment.
* Requires subscription.
*/
    getEffortsBySegmentId(props: IGetEffortsBySegmentId): Promise<IDetailedSegmentEffort[]>;
    /**
     *  Get Segment Effort (getSegmentEffortById)
     * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
     */
    getSegmentEffortById(props: IGetSegmentEffortById): Promise<IDetailedSegmentEffort>;
    /**
 * Get Segment Effort Streams (getSegmentEffortStreams)
 * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
 */
    getSegmentEffortStreams(props: IGetSegmentEffortStreams): Promise<IStreamSet>;
}

interface ICreateUpload {
    file: File | Buffer | string | any;
    name: string;
    description: string;
    trainer: string;
    commute: string;
    data_type: "fit" | "fit.gz" | "tcx" | "tcx.gz" | "gpx" | "gpx.gz";
    external_id: string;
}
interface IGetUploadById {
    uploadId: number;
}
declare class StravaUploadApi {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    /**
     * Upload Activity (createUpload)
     * Uploads a new data file to create an activity from. Requires activity:write scope.
     */
    createUpload(props: ICreateUpload): Promise<IUpload>;
    /**
     * Get Upload (getUploadById)
     * Returns an upload for a given identifier. Requires activity:write scope.
     */
    getUploadById(props: IGetUploadById): Promise<IUpload>;
}

interface IRetrieveAccessTokenWtRefreshToken {
    token_type: string;
    access_token: string;
    expires_at: number;
    expires_in: number;
    refresh_token: string;
}
interface IOutputGetTokenFromAuth {
    token_type: string;
    expires_at: number;
    expires_in: number;
    refresh_token: string;
    access_token: string;
    athlete: {
        id: number;
        username: null | string;
        resource_state: number;
        firstname: string;
        lastname: string;
        bio: string;
        city: string;
        state: string;
        country: null | string;
        sex: string;
        premium: boolean;
        summit: boolean;
        created_at: string;
        updated_at: string;
        badge_type_id: number;
        weight: number;
        profile_medium: string;
        profile: string;
        friend: null | any;
        follower: null | any;
    };
}
/**
 *
    read: read public segments, public routes, public profile data, public posts, public events, club feeds, and leaderboards
    read_all:read private routes, private segments, and private events for the user
    profile:read_all: read all profile information even if the user has set their profile visibility to Followers or Only You
    profile:write: update the user's weight and Functional Threshold Power (FTP), and access to star or unstar segments on their behalf
    activity:read: read the user's activity data for activities that are visible to Everyone and Followers, excluding privacy zone data
    activity:read_all: the same access as activity:read, plus privacy zone data and access to read the user's activities with visibility set to Only You
    activity:write: access to create manual activities and uploads, and access to edit any activities that are visible to the app, based on activity read access level
 */
type TAuthorization = "read" | "read_all" | "profile:read_all" | "profile:write" | "activity:read" | "activity:read_all" | "activity:write" | "t_allAuth";
declare class StravaAuth0Api {
    stravaApi: StravaApi;
    constructor(stravaApi: StravaApi);
    getAskAuthUrl(authToAsk: TAuthorization | string): string;
    getTokenFromAuth(authorizationCode: string): Promise<IOutputGetTokenFromAuth>;
    retrieveAccessTokenWtRefreshToken(refreshToken: string): Promise<IRetrieveAccessTokenWtRefreshToken>;
}

interface IStravaApi {
    accessToken: string;
    clientId: string;
    clientSecret: string;
    refreshToken?: string;
}
declare class StravaApi {
    private accessToken;
    private refreshToken;
    private clientId;
    private clientSecret;
    private baseUrl;
    auth0: StravaAuth0Api;
    activity: StravaActivityApi;
    athlete: StravaAthleteApi;
    club: StravaClubApi;
    gear: StravaGearApi;
    route: StravaRoutesApi;
    segment: StravaSegmentApi;
    segmentEffort: StravaSegmentEffortsApi;
    upload: StravaUploadApi;
    constructor(props: IStravaApi);
    getBaseUrl: () => string;
    setBaseUrl: (baseUrl: string) => string;
    getClientId: () => string;
    setClientId: (clientId: string) => string;
    getClientSecret: () => string;
    setClientSecret: (clientSecret: string) => string;
    getAccessToken: () => string;
    setAccessToken: (accessToken: string) => string;
    getRefreshToken: () => string;
    setRefreshToken: (refreshToken: string) => string;
    getAuthHeader: () => {
        Authorization: string;
    };
}

export { StravaApi as Strava, strava_entity as types };
