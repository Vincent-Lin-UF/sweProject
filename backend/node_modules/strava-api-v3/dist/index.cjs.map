{"version":3,"sources":["../src/index.ts","../src/api/subApi/StravaActivity.api.ts","../src/api/subApi/StravaAthlete.api.ts","../src/api/subApi/StravaClub.api.ts","../src/api/subApi/StravaGear.api.ts","../src/api/subApi/StravaRoutes.api.ts","../src/api/subApi/StravaSegment.api.ts","../src/api/subApi/StravaSegmentEfforts.api.ts","../src/api/subApi/StravaUpload.api.ts","../src/api/subApi/StravaAuth0.api.ts","../src/api/Strava.api.ts","../src/entity/strava.entity.ts"],"sourcesContent":["import Strava from \"./api/Strava.api\";\nexport * as types from \"./entity/strava.entity\";\nexport {\n    Strava\n}","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface ICreateActivity {\n    name: string;//required String, in form \tThe name of the activity.\n    type?: string;//String, in form \tType of activity. For example - Run, Ride etc.\n    sport_type: string; //required String, in form \tSport type of activity. For example - Run, MountainBikeRide, Ride, etc.\n    start_date_local: string; //required Date, in form \tISO 8601 formatted date time.\n    elapsed_time: number;//required Integer, in form \tIn seconds.\n    description?: string;//String, in form \tDescription of the activity.\n    distance?: number;//Float, in form \tIn meters.\n    trainer?: number;//Integer, in form \tSet to 1 to mark as a trainer activity.\n    commute?: number;//Integer, in form \tSet to 1 to mark as commute. \n}\n\ninterface IGetActivityById {\n    id: number;\n    include_all_efforts?: boolean;\n}\n\ninterface IGetActivityComments {\n    id: number;\n    page_size?: number;\n    after_cursor?: string;\n}\n\ninterface IGetKudoersByActivityId {\n    id: number;\n    page?: number;\n    per_page?: number;\n}\n\ninterface IGetLapsByActivityId {\n    id: number;\n}\n\ninterface IGetZonesByActivityId {\n    id: number;\n}\n\ninterface IUpdateActivityById {\n    id: number;\n    body: entity.IUpdatableActivity\n}\n\n\ninterface IGetActivityStreams {\n    id: number | string; //required Long, in path \tThe identifier of the activity.\n    keys: entity.TKeysPossibleType[]; //required array[String], in query \tDesired stream types. May take one of the following values:\n    key_by_type: boolean;//required Boolean, in query \tMust be true. \n}\n\nclass StravaActivityApi {\n    stravaApi: StravaApi;\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    async createActivity(props: ICreateActivity): Promise<entity.IDetailedActivity> {\n        try {\n            const response = await fetch(`${this.stravaApi.getBaseUrl()}/activities`, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"POST\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n* \n* Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n* @param props \n* @returns \n*/\n    async getActivityById(props: IGetActivityById): Promise<entity.IDetailedActivity> {\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/activities/${props.id}`;\n            if (props.include_all_efforts) {\n                url = `${url}?include_all_efforts`;\n            }\n\n            const response = await fetch(`${this.stravaApi.getBaseUrl()}/activities/${props.id}`, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    /**\n * \n * List Activity Comments (getCommentsByActivityId)\n * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n * @param props \n * @returns \n */\n    async getCommentsByActivityId(props: IGetActivityComments): Promise<entity.IComment[]> {\n        const { id, ...body } = props;\n\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/activities/${props.id}/comments`;\n            url = `${url}?page_size=${props.page_size ?? 30}`;\n            if (props.after_cursor)\n                url = `${url}&after_cursor=${props.after_cursor}`;\n\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => {\n                console.log(\"resp\")\n                console.log(resp)\n                return resp.json()\n            });\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    /**\n* List Activity Kudoers (getKudoersByActivityId)\n* Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n* @param props \n* @returns \n*/\n    async getKudoersByActivityId(props: IGetKudoersByActivityId): Promise<entity.ISummaryAthlete[]> {\n        const { id, ...body } = props;\n\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/activities/${props.id}/kudos`;\n            url = `${url}?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    /**\n * \n * List Activity Laps (getLapsByActivityId)\n * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n */\n    async getLapsByActivityId(props: IGetLapsByActivityId): Promise<entity.ILap[]> {\n        const { id, ...body } = props;\n\n        try {\n            const response = await fetch(`${this.stravaApi.getBaseUrl()}/activities/${props.id}/laps`, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    // http get \"https://www.strava.com/api/v3/athlete/activities?before=&after=&page=&per_page=\" \"Authorization: Bearer [[token]]\"\n    async getZonesByActivityId(props: IGetZonesByActivityId): Promise<entity.IActivityZone[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/activities/${props.id}/zones`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    async updateActivityById(props: IUpdateActivityById): Promise<entity.IUpdatableActivity> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/activities/${props.id}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                body: JSON.stringify(props.body),\n                method: \"PUT\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    // ========================== stream\n    /**\n     * Get Activity Streams (getActivityStreams)\n     * Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.\n     */\n    async getActivityStreams(props: IGetActivityStreams): Promise<entity.IStreamSet> {\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/activities/${props.id}/streams`;\n            url = `${url}?keys=${props.keys.join(\",\")}&key_by_type=${(props.key_by_type) ? \"true\" : \"false\"}`\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    //GET\n\t//https://www.strava.com/activities/12087149535/export_gpx\n    // not present inside documentation ...\n    async getActivitiesGpxById(id : string | number): Promise<any> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/activities/${id}/export_gpx`;\n            console.log(`----> ${url}`)\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n}\n\nexport default StravaActivityApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface IGetLoggedInAthleteActivities {\n    before?: number;//Integer, in query \tAn epoch timestamp to use for filtering activities that have taken place before a certain time.\n    after?: number;//Integer, in query \tAn epoch timestamp to use for filtering activities that have taken place after a certain time.\n    page: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page: number;// Number of items per page. Defaults to 30. \n}\n\ninterface IGetStats {\n    id: number;\n}\n\ninterface IUpdateLoggedInAthlete {\n    weight: number;//required Float, in path \tThe weight of the athlete in kilograms. \n}\n\ninterface IGetLoggedInAthleteClubs {\n    page?: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page?: number;//Integer, in query \tNumber of items per page. Defaults to 30.  \n}\n\ninterface IGetRoutesByAthleteId {\n    id: number;\n    page: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page: number;// Integer, in query \tNumber of i    \n}\n\nclass StravaAthleteApi {\n    stravaApi: StravaApi;\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    // http get \"https://www.strava.com/api/v3/athlete/activities?before=&after=&page=&per_page=\" \"Authorization: Bearer [[token]]\"\n    async getLoggedInAthleteActivities(props: IGetLoggedInAthleteActivities): Promise<entity.ISummaryActivity[]> {\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/athlete/activities?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            //before=${props.before}&after=${props.after}&\n            if (props.before !== undefined)\n                url = `${url}&before=${props.before}`;\n\n            if (props.after !== undefined)\n                url = `${url}&after=${props.after}`;\n\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching gettin activities by id:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get Authenticated Athlete (getLoggedInAthlete)\n     * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.\n     * @returns \n     */\n    async getLoggedInAthlete(): Promise<entity.IDetailedAthlete> {\n        try {\n            const response = await fetch(`${this.stravaApi.getBaseUrl()}/athlete`, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n    * Get Zones (getLoggedInAthleteZones)\n    * @returns Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.\n    */\n    async getLoggedInAthleteZones(): Promise<entity.IZone> {\n        try {\n            const response = await fetch(`${this.stravaApi.getBaseUrl()}/athlete/zones`, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n    * \n    * @param props \n    * Get Athlete Stats (getStats)\n    * Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.\n    * @returns \n    */\n    async getStats(props: IGetStats): Promise<entity.IActivitiesStats> {\n        try {\n            const response = await fetch(`${this.stravaApi.getBaseUrl()}/athletes/${props.id}/stats`, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n    * Update Athlete (updateLoggedInAthlete)\n    * Update the currently authenticated athlete. Requires profile:write scope.\n    * @param props \n    * @returns \n    */\n    async updateLoggedInAthlete(props: IUpdateLoggedInAthlete): Promise<entity.IDetailedAthlete> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/athlete?weight=${props.weight}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"PUT\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n* Returns a list of the clubs whose membership includes the authenticated athlete.\n*/\n    async getLoggedInAthleteClubs(props: IGetLoggedInAthleteClubs): Promise<entity.ISummaryClub[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/athlete/clubs?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n *  List Athlete Routes (getRoutesByAthleteId)\n * Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.\n */\n    async getRoutesByAthleteId(props: IGetRoutesByAthleteId): Promise<entity.IRoute[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/athletes/${props.id}/routes?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n}\nexport default StravaAthleteApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface IGetClubActivitiesById {\n    id: number;//required Long, in path \tThe identifier of the club.\n    page?: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page?: number;//Integer, in query \tNumber of items per page. Defaults to 30. \n}\n\ninterface IGetClubAdminsById {\n    id: number;//required Long, in path \tThe identifier of the club.\n    page?: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page?: number;// Integer, in query \tNumber of items per page. Defaults to 30. \n}\n\ninterface IGetClubById {\n    id: number;\n}\n\ninterface IGetClubMembersById {\n    id: number | string;//required Long, in path \tThe identifier of the club.\n    page?: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page?: number;//Integer, in query \tNumber of items per page. Defaults to 30. \n}\n\nclass StravaClubApi {\n    stravaApi: StravaApi;\n\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    async getClubActivitiesById(props: IGetClubActivitiesById): Promise<entity.IClubActivity[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/clubs/${props.id}/activities?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * \n     * @param props \n     * @returns Returns a list of the administrators of a given club.\n     */\n    async getClubAdminsById(props: IGetClubAdminsById): Promise<entity.ISummaryAthlete[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/clubs/${props.id}/admins?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    async getClubById(props: IGetClubById): Promise<entity.IDetailedClub> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/clubs/${props.id}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n    /**\n     * Returns a list of the athletes who are members of a given club.\n     */\n    async getClubMembersById(props: IGetClubMembersById): Promise<entity.IClubAthlete[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/clubs/${props.id}/members?page=${props.page ?? 1}&per_page=${props.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n}\nexport default StravaClubApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface IGetGearById {\n    id: string;//required String, in path \tThe identifier of the gear. \n}\n\nclass StravaGearApi {\n    stravaApi: StravaApi;\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    /**\n     * gear\n     */\n    async getGearById(props: IGetGearById): Promise<entity.IDetailedGear> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/gear/${props.id}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n}\nexport default StravaGearApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface IGetRouteAsGPX {\n    id: string;//required Long, in path \tThe iden\n}\n\ninterface IGetRouteAsTCX {\n    id: string;//required Long, in path \tThe identifier of the route. \n}\n\ninterface IGetRouteById {\n    id: string;//required Long, in path \tThe ident\n}\n\ninterface IGetRouteStreams {\n    id: number | string;\n}\n\nclass StravaRoutesApi {\n    stravaApi : StravaApi;\n    constructor (stravaApi : StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    /**\n     * \n    * Export Route GPX (getRouteAsGPX)\n    * Returns a GPX file of the route. Requires read_all scope for private routes.\n    * @return gpx file ??? \n    */\n    async getRouteAsGPX(props: IGetRouteAsGPX): Promise<string> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/routes/${props.id}/export_gpx`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => {\n                return resp.text();});\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Export Route TCX (getRouteAsTCX)\n     * Returns a TCX file of the route. Requires read_all scope for private routes.\n     */\n    async getRouteAsTCX(props: IGetRouteAsTCX): Promise<string> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/routes/${props.id}/export_tcx`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => {\n                return resp.text()\n            });\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     *  Get Route (getRouteById)\n     * Returns a route using its identifier. Requires read_all scope for private routes.\n     */\n    async getRouteById(props: IGetRouteById): Promise<entity.IRoute> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/routes/${props.id}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get Route Streams (getRouteStreams)\n     * Returns the given route's streams. Requires read_all scope for private routes.\n     */\n        async getRouteStreams(props: IGetRouteStreams): Promise<entity.IStreamRouteSetCorrect[]> {\n            try {\n                const url = `${this.stravaApi.getBaseUrl()}/routes/${props.id}/streams`;\n                const response = await fetch(url, {\n                    headers: this.stravaApi.getAuthHeader(),\n                    method: \"GET\"\n                }).then(resp => resp.json());\n    \n                return response\n            } catch (error) {\n                console.error('Error fetching athlete profile:', error);\n                throw error;\n            }\n        }\n}\nexport default StravaRoutesApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface IExploreSegments {\n    bounds: string;//required array[Float], in query \tThe latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]\n    activity_type?: string;//String, in query \tDesired activity type. May take one of the following values: running, riding\n    min_cat?: number;//Integer, in query \tThe minimum climbing category.\n    max_cat?: number;//Integer, in query \t The maximum climbing category. \n}\n\ninterface IGetLoggedInAthleteStarredSegments {\n    page ?: number;//Integer, in query \tPage number. Defaults to 1.\n    per_page ?: number;//Integer, in query \tNumber of items per page. Defaults to 30. \n}\n\ninterface IGetSegmentById {\n    id: number; //id of the segment\n}\n\ninterface IStarSegment {\n    id: number;//required Long, in path \tThe identifier of the segment to star.\n    starred: boolean;//required Boolean, in form \tIf true, star the segment; if false, unstar the segment. \n}\n\ntype TKeysSegmentStreams = \"distance\" | \"latlng\" | \"altitude\";\ntype IStreamSetSegment = Pick<entity.IStreamSet, \"distance\" | \"latlng\" | \"altitude\">\n\ninterface IGetSegmentStreams {\n    id: string;//required Long, in path \tThe identifier of the segment.\n    keys: TKeysSegmentStreams[];//required array[String], in query \tThe types of streams to return. May take one of the following values:\n    key_by_type: boolean; //required Boolean, in query \tMust be true. \n}\n\nclass StravaSegmentApi {\n    stravaApi : StravaApi;\n    constructor (stravaApi : StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    /**\n     * Explore segments (exploreSegments)\n    * Returns the top 10 segments matching a specified query.\n     */\n    async exploreSegments(props: IExploreSegments): Promise<entity.IExplorerResponse> {\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/segments/explore?bounds=${props.bounds}`;\n            if (props.activity_type) url = `${url}&activity_type=${props.activity_type}`;\n            if (props.min_cat) url = `${url}&min_cat=${props.min_cat}`;\n            if (props.max_cat) url = `${url}&max_cat=${props.max_cat}`;\n\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     *  List Starred Segments (getLoggedInAthleteStarredSegments)\n     * List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.\n     */\n    async getLoggedInAthleteStarredSegments(props ?: IGetLoggedInAthleteStarredSegments): Promise<entity.ISummarySegment[]> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/segments/starred?page=${props?.page ?? 1}&per_page=${props?.per_page ?? 30}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get Segment (getSegmentById)\n     * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.\n     */\n    async getSegmentById(props: IGetSegmentById): Promise<entity.IDetailedSegment> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/segments/${props.id}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Star Segment (starSegment)\n     * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.\n     */\n    async starSegment(props: IStarSegment): Promise<entity.IDetailedSegment> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/segments/${props.id}/starred?starred=${(props.starred ? \"true\" : \"false\")}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"PUT\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get Segment Streams (getSegmentStreams)\n     * Returns the given segment's streams. Requires read_all scope for private segments.\n     */\n        async getSegmentStreams(props: IGetSegmentStreams): Promise<IStreamSetSegment> {\n            try {\n                let url = `${this.stravaApi.getBaseUrl()}/segments/${props.id}/streams`;\n                url = `${url}?keys=${props.keys.join(',')}&key_by_type=${(props.key_by_type) ? \"true\" : \"false\"}`\n    \n                const response = await fetch(url, {\n                    headers: this.stravaApi.getAuthHeader(),\n                    method: \"GET\"\n                }).then(resp => resp.json());\n    \n                return response\n            } catch (error) {\n                console.error('Error fetching athlete profile:', error);\n                throw error;\n            }\n        }\n}\nexport default StravaSegmentApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface IGetEffortsBySegmentId {\n    segment_id: number;//required Integer, in query \tThe identifier of the segment.\n    start_date_local?: string;//Date, in query \tISO 8601 formatted date time.\n    end_date_local?: string;//Date, in query \tISO 8601 formatted date time.\n    per_page?: number;//Integer, in query \tNumber of it\n}\n\ninterface IGetSegmentEffortById {\n    id: number | string;//id of the segment effort\n}\n\ninterface IGetSegmentEffortStreams {\n    id: number | string;//required Long, in path \tThe identifier of the segment effort.\n    keys: entity.TKeysPossibleType[];//[]required array[String], in query \tThe types of streams to return. May take one of the following values:\n    key_by_type: boolean; //required Boolean, in query \tMust be true. \n}\n\nclass StravaSegmentEffortsApi {\n    stravaApi: StravaApi;\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    /**\n* List Segment Efforts (getEffortsBySegmentId)\n* Returns a set of the authenticated athlete's segment efforts for a given segment.\n* Requires subscription.\n*/\n    async getEffortsBySegmentId(props: IGetEffortsBySegmentId): Promise<entity.IDetailedSegmentEffort[]> {\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/segment_efforts?segment_id=${props.segment_id}`\n\n            if (props.start_date_local)\n                url = `${url}&start_date_local=${props.start_date_local}`;\n            if (props.end_date_local)\n                url = `${url}&end_date_local=${props.end_date_local}`;\n            if (props.per_page)\n                url = `${url}&per_page=${props.per_page ?? 30}`;\n\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n     *  Get Segment Effort (getSegmentEffortById)\n     * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.\n     */\n    async getSegmentEffortById(props: IGetSegmentEffortById): Promise<entity.IDetailedSegmentEffort> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/segment_efforts/${props.id}`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    /**\n * Get Segment Effort Streams (getSegmentEffortStreams)\n * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.\n */\n    async getSegmentEffortStreams(props: IGetSegmentEffortStreams): Promise<entity.IStreamSet> {\n        try {\n            let url = `${this.stravaApi.getBaseUrl()}/segment_efforts/${props.id}/streams`;\n            url = `${url}?keys=${props.keys.join(\",\")}&key_by_type=${(props.key_by_type) ? \"true\" : \"false\"}`\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n}\nexport default StravaSegmentEffortsApi;","import * as entity from \"../../entity/strava.entity\";\nimport StravaApi from \"./../Strava.api\";\n\ninterface ICreateUpload {\n    file: File | Buffer | string | any;// ReadStream // File, in form \tThe uploaded file.\n    name: string; //String, in form \tThe desired name of the resulting activity.\n    description: string; //String, in form \tThe desired description of the resulting activity.\n    trainer: string; //String, in form \tWhether the resulting activity should be marked as having been performed on a trainer.\n    commute: string;//String, in form \tWhether the resulting activity should be tagged as a commute.\n    data_type: \"fit\" | \"fit.gz\" | \"tcx\" | \"tcx.gz\" | \"gpx\" | \"gpx.gz\"; //String, in form \tThe format of the uploaded file. May take one of the following values: fit, fit.gz, tcx, tcx.gz, gpx, gpx.gz\n    external_id: string;// String, in form \tThe desired external identifier of the resulting activity. \n}\n\ninterface IGetUploadById {\n    uploadId: number;//required Long, in path \tThe identifier of the upload. \n}\n\nclass StravaUploadApi {\n    stravaApi: StravaApi;\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    /**\n     * Upload Activity (createUpload)\n     * Uploads a new data file to create an activity from. Requires activity:write scope.\n     */\n    async createUpload(props: ICreateUpload): Promise<entity.IUpload> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/uploads`;\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"POST\",\n                body: JSON.stringify(props)\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n    /**\n     * Get Upload (getUploadById)\n     * Returns an upload for a given identifier. Requires activity:write scope.\n     */\n    async getUploadById(props: IGetUploadById): Promise<entity.IUpload> {\n        try {\n            const url = `${this.stravaApi.getBaseUrl()}/uploads/${props.uploadId}`;\n            console.log(`----> ${url}`)\n            const response = await fetch(url, {\n                headers: this.stravaApi.getAuthHeader(),\n                method: \"GET\"\n            }).then(resp => resp.json());\n\n            return response\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n}\nexport default StravaUploadApi;","// todo : rework naming\nimport StravaApi from \"./../Strava.api\";\n\ninterface IRetrieveAccessTokenWtRefreshToken {\n    token_type : string;\n    access_token : string;\n    expires_at : number;\n    expires_in : number;\n    refresh_token : string;\n}\n\n// maybe replace athlete later by IAthlete type\n// after check this type mismatch with the other object ...\ninterface IOutputGetTokenFromAuth {\n    token_type: string;\n    expires_at: number;\n    expires_in: number;\n    refresh_token: string,\n    access_token: string,\n    athlete: {\n      id: number,\n      username: null | string;\n      resource_state: number;\n      firstname: string;\n      lastname: string;\n      bio: string;\n      city: string;\n      state: string;\n      country: null | string,\n      sex: string;\n      premium: boolean;\n      summit: boolean;\n      created_at: string;\n      updated_at: string;\n      badge_type_id: number;\n      weight: number;\n      profile_medium: string;\n      profile: string;\n      friend: null | any,\n      follower: null | any;\n    }\n}\n\n/**\n * \n    read: read public segments, public routes, public profile data, public posts, public events, club feeds, and leaderboards\n    read_all:read private routes, private segments, and private events for the user\n    profile:read_all: read all profile information even if the user has set their profile visibility to Followers or Only You\n    profile:write: update the user's weight and Functional Threshold Power (FTP), and access to star or unstar segments on their behalf\n    activity:read: read the user's activity data for activities that are visible to Everyone and Followers, excluding privacy zone data\n    activity:read_all: the same access as activity:read, plus privacy zone data and access to read the user's activities with visibility set to Only You\n    activity:write: access to create manual activities and uploads, and access to edit any activities that are visible to the app, based on activity read access level\n */\ntype TAuthorization = \"read\" | \"read_all\" | \"profile:read_all\" | \"profile:write\" | \"activity:read\" | \"activity:read_all\" | \"activity:write\" | \"t_allAuth\";\n//scope=read,activity:write\nconst allAuth = `read,read_all,profile:read_all,profile:write,activity:read,activity:read_all,activity:write`;\n\nclass StravaAuth0Api {\n    stravaApi: StravaApi;\n    constructor(stravaApi: StravaApi) {\n        this.stravaApi = stravaApi;\n    }\n\n    getAskAuthUrl(authToAsk : TAuthorization | string) {\n        const scope = (authToAsk === \"t_allAuth\") ? allAuth : authToAsk;\n        return `https://www.strava.com/oauth/authorize?client_id=${process.env.STRAVA_CLIENT_ID}&redirect_uri=http://localhost&response_type=code&scope=${scope}`;\n    }\n\n    async getTokenFromAuth(authorizationCode: string): Promise<IOutputGetTokenFromAuth> {\n        try {\n            const url = `https://www.strava.com/oauth/token?client_id=${process.env.STRAVA_CLIENT_ID}&client_secret=${process.env.STRAVA_CLIENT_SECRET}&code=${authorizationCode}&grant_type=authorization_code`;\n            \n            // require post request - retrieve new access and refresh token from strava api\n            const resp = await fetch(url, {method : \"POST\"}).then(resp => resp.json());\n            console.log(\"resp : \");\n            console.log(resp);\n      \n           return resp;\n        } catch (error) {\n            console.error('Error fetching athlete profile:', error);\n            throw error;\n        }\n    }\n\n    async retrieveAccessTokenWtRefreshToken(refreshToken : string) : Promise<IRetrieveAccessTokenWtRefreshToken> {\n        try {\n            const url = `https://www.strava.com/oauth/token?client_id=${process.env.STRAVA_CLIENT_ID}&client_secret=${process.env.STRAVA_CLIENT_SECRET}&refresh_token=${refreshToken}&grant_type=refresh_token`;\n            const resp = await fetch(url, {method : \"POST\"}).then(resp => resp.json());\n            console.log(\"resp : \");\n            console.log(resp);\n            return resp;\n        }\n        catch(error) {\n            console.error('Error fetching retrieveAccessTokenWtRefreshToken', error);\n            throw error;\n        }\n    }\n}\nexport default StravaAuth0Api;","import * as subApi from \"./subApi\";\n\ninterface IStravaApi {\n    accessToken: string;\n    clientId: string;\n    clientSecret: string;\n    refreshToken?: string;\n}\n\nclass StravaApi {\n    private accessToken: string;\n    private refreshToken: string;\n    private clientId: string;\n    private clientSecret: string;\n    private baseUrl: string = \"https://www.strava.com/api/v3\";\n\n    public auth0: subApi.StravaAuth0Api;\n    public activity: subApi.StravaActivityApi;\n    public athlete: subApi.StravaAthleteApi;\n    public club: subApi.StravaClubApi;\n    public gear: subApi.StravaGearApi;\n    public route: subApi.StravaRoutesApi;\n    public segment: subApi.StravaSegmentApi;\n    public segmentEffort: subApi.StravaSegmentEffortsApi;\n    public upload: subApi.StravaUploadApi;\n\n    constructor(props: IStravaApi) {\n        this.accessToken = props.accessToken;\n        this.clientId = props.clientId;\n        this.clientSecret = props.clientSecret;\n        this.refreshToken = props.refreshToken ?? \"\";\n\n        this.auth0 = new subApi.StravaAuth0Api(this);\n        this.activity = new subApi.StravaActivityApi(this);\n        this.athlete = new subApi.StravaAthleteApi(this);\n        this.club = new subApi.StravaClubApi(this);\n        this.gear = new subApi.StravaGearApi(this);\n        this.route = new subApi.StravaRoutesApi(this);\n        this.segment = new subApi.StravaSegmentApi(this);\n        this.segmentEffort = new subApi.StravaSegmentEffortsApi(this);\n        this.upload = new subApi.StravaUploadApi(this);\n    }\n\n    getBaseUrl = () => this.baseUrl;\n    setBaseUrl = (baseUrl: string) => this.baseUrl = baseUrl;\n\n    getClientId = () => this.clientId;\n    setClientId = (clientId: string) => this.clientId = clientId;\n\n    getClientSecret = () => this.clientSecret;\n    setClientSecret = (clientSecret: string) => this.clientSecret = clientSecret;\n\n    getAccessToken = () => this.accessToken;\n    setAccessToken = (accessToken: string) => this.accessToken = accessToken;\n\n    getRefreshToken = () => this.refreshToken;\n    setRefreshToken = (refreshToken: string) => this.refreshToken = refreshToken;\n\n    getAuthHeader = () => ({ 'Authorization': `Bearer ${this.accessToken}` });\n}\n\nexport default StravaApi;","/**\n * A set of rolled-up statistics and totals for an athlete\n */\nexport interface IActivitiesStats {\n    biggest_ride_distance?: number;//double \tThe longest distance ridden by the athlete.\n    biggest_climb_elevation_gain?: number; //double \tThe highest climb ridden by the athlete.\n    recent_ride_totals?: IActivityTotal; //ActivityTotal \tThe recent (last 4 weeks) ride stats for the athlete.\n    recent_run_totals?: IActivityTotal; //ActivityTotal \tThe recent (last 4 weeks) run stats for the athlete.\n    recent_swim_totals?: IActivityTotal; //ActivityTotal \tThe recent (last 4 weeks) swim stats for the athlete.\n    ytd_ride_totals?: IActivityTotal; //ActivityTotal \tThe year to date ride stats for the athlete.\n    ytd_run_totals?: IActivityTotal; //ActivityTotal \tThe year to date run stats for the athlete.\n    ytd_swim_totals?: IActivityTotal; //ActivityTotal \tThe year to date swim stats for the athlete.\n    all_ride_totals?: IActivityTotal; //ActivityTotal \tThe all time ride stats for the athlete.\n    all_run_totals?: IActivityTotal; //ActivityTotal \tThe all time run stats for the athlete.\n    all_swim_totals?: IActivityTotal; //ActivityTotal \tThe all time swim stats for the athlet\n}\n\n/**\n * A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.\n */\nexport interface IActivityTotal {\n    count: number; //integer \tThe number of activities considered in this total.\n    distance: number;// float \tThe total distance covered by the considered activities.\n    moving_time: number;//integer \tThe total moving time of the considered activities.\n    elapsed_time: number; //integer \tThe total elapsed time of the considered activities.\n    elevation_gain: number; // float \tThe total elevation gain of the considered activities.\n    achievement_count?: number; //integer \tThe total number of achievements of the considered activities. \n}\n\n/**\n * An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)\n * https://developers.strava.com/docs/reference/#api-models-ActivityType\n */\nexport type TActivityType = 'AlpineSki' | 'BackcountrySki' | 'Canoeing' | 'Crossfit' | 'EBikeRide' | 'Elliptical' | 'Golf' | 'Handcycle' | 'Hike' | 'IceSkate' | 'InlineSkate' | 'Kayaking' | 'Kitesurf' | 'NordicSki' | 'Ride' | 'RockClimbing' | 'RollerSki' | 'Rowing' | 'Run' | 'Sail' | 'Skateboard' | 'Snowboard' | 'Snowshoe' | 'Soccer' | 'StairStepper' | 'StandUpPaddling' | 'Surfing' | 'Swim' | 'Velomobile' | 'VirtualRide' | 'VirtualRun' | 'Walk' | 'WeightTraining' | 'Wheelchair' | 'Windsurf' | 'Workout' | 'Yoga';\n\n\n\n// bad type from api so new interface for route stream\nexport interface IStreamRouteSetCorrect {\n    type: \"latlng\" | \"altitude\" | \"distance\";\n    data: number[];\n}\n\n// mmmmmmm\nexport type TKeysPossibleType = 'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth';\n\nexport interface IStreamActivitiesSetCorrect {\n    type: \"latlng\" | \"altitude\" | \"distance\" | any;\n    data: number[];\n    series_type: TKeysPossibleType;\n    original_size: number;\n    resolution: \"hight\";\n}\n\nexport interface ISummaryGear {\n    id: string;//string \tThe gear's unique identifier.\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"\n    primary: boolean;//boolean \tWhether this gear's is the owner's default one.\n    name: string;//string \tThe gear's name.\n    distance: number; //float \t The distance logged with this gear. \n}\n\nexport interface ISummaryPRSegmentEffort {\n    id?: number; // np\n    activity_id?: number;//np\n    elapsed_time?: number;\n    distance?: number;//np\n    start_date?: string;//np\n    start_date_local?: string; //np\n    is_kom?: boolean; // np\n\n    pr_activity_id?: number;//long \tThe unique identifier of the activity related to the PR effort.\n    pr_elapsed_time?: number;//integer \tThe elapsed time ot the PR effort.\n    pr_date?: string; //DateTime \tThe time at which the PR effort was started.\n    effort_count?: number;//integer \tNumber of efforts by the authenticated athlete on this segment. \n}\n\n// todo : check it instance off???\n/**\n * ...\n */\nexport interface IActivityZone {\n    score: number; //integer \tAn instance of integer.\n    distribution_buckets: string;//#/TimedZoneDistribution \tAn instance of #/TimedZoneDistribution.\n    type: string;//string \tMay take one of the following values: heartrate, power\n    sensor_based: boolean; //boolean \tAn instance of boolean.\n    points: number;//integer \tAn instance of integer.\n    custom_zones: boolean; //boolean \tAn instance of boolean.\n    max: number;//integer \tAn instance of integer. \n}\n\nexport interface IBaseStream {\n    original_size: number; //integer \tThe number of data points in this stream\n    resolution: string;//string \tThe level of detail (sampling) in which this stream was returned May take one of the following values: low, medium, high\n    series_type: string; //string \tThe base series used in the case the stream was downsampled May take one of the following values: distance, time\n}\n\nexport interface IClubActivity {\n    resource_state: number;\n    athlete: IMetaAthlete;//MetaAthlete \tAn instance of MetaAthlete.\n    name: string;//string \tThe name of the activity\n    distance: number;//float \tThe activity's distance, in meters\n    moving_time: number;//integer \tThe activity's moving time, in seconds\n    elapsed_time: number;//integer \tThe activity's elapsed time, in seconds\n    total_elevation_gain: number;//float \tThe activity's total elevation gain.\n    type: TActivityType; //ActivityType \tDeprecated. Prefer to use sport_type\n    sport_type: TSportType; //SportType \tAn instance of SportType.\n    workout_type?: number | null; //integer  The activity's workout type  \t| doc bad type\n}\n\nexport interface IClubAthlete {\n    resource_state: 1 | 2 | 3; //integer \tResource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    firstname: string;//string \tThe athlete's first name.\n    lastname: string;//string \tThe athlete's last initial.\n    //member ?: string;//string \tThe athlete's member status.\n    admin: boolean;//boolean \tWhether the athlete is a club admin.\n    owner: boolean;//boolean \tWhether the athlete is club owner. \n    membership: 'member' | 'admin';\n}\n\nexport interface IClubComment {\n    id: number;//long \tThe unique identifier of this comment\n    activity_id: number;//long \tThe identifier of the activity this comment is related to\n    text: string; //string \tThe content of the comment\n    athlete: ISummaryAthlete; //SummaryAthlete \tAn instance of SummaryAthlete.\n    created_at: string; // The time at which this comment was created. \n}\n\nexport interface IError {\n    code: string;//string \tThe code associated with this error.\n    field: string; //string \tThe specific field or aspect of the resource associated with this error.\n    resource: string; //string \tThe type of resource associated with this error. \n}\n\nexport interface ExplorerSegment {\n    id: number;//long \tThe unique identifier of this segment\n    name: string;//string \tThe name of this segment\n    climb_category: \"NG\" | 0 | 1 | 2 | 3 | 4 | 5 | \"LG\"; //integer \tThe category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.\n    climb_category_desc: string; //string \tThe description for the category of the climb May take one of the following values: NC, 4, 3, 2, 1, HC\n    avg_grade: number;// float \tThe segment's average grade, in percents\n    start_latlng: TLatLng; //LatLng \tAn instance of LatLng.\n    end_latlng: TLatLng; //LatLng \tAn instance of LatLng.\n    elev_difference: number;// float; \tThe segments's evelation difference, in meters\n    distance: number;//float \tThe segment's distance, in meters\n    points: string; //string \t The polyline of the segment \n}\n\n/**\n * Encapsulates the errors that may be returned from the API.\n */\nexport interface IFault {\n    errors: IError;//Error \tThe set of specific errors associated with this fault, if any.\n    message: string; //string \t The message of the fault.\n}\n\nexport interface IHeartRateZoneRanges {\n    custom_zones: boolean;//boolean \tWhether the athlete has set their own custom heart rate zones\n    zones: IZoneRanges;// An instance of ZoneRanges. \n}\n\n/**\n * \n */\nexport interface ILap {\n    id: number;//long \tThe unique identifier of this lap\n    resource_state?: number; // np\n    device_watts?: boolean; // np\n    average_watts?: number; // np\n    average_heartrate?: number;// np\n    max_heartrate?: number; // np\n    activity: IMetaActivity; //MetaActivity \tAn instance of MetaActivity.\n    athlete: IMetaAthlete; //MetaAthlete \tAn instance of MetaAthlete.\n    average_cadence: number;//float \tThe lap's average cadence\n    average_speed: number;//float \tThe lap's average speed\n    distance: number;//float \tThe lap's distance, in meters\n    elapsed_time: number;//integer \tThe lap's elapsed time, in seconds\n    start_index: number;//integer \tThe start index of this effort in its activity's stream\n    end_index: number;//integer \tThe end index of this effort in its activity's stream\n    lap_index: number;//integer \tThe index of this lap in the activity it belongs to\n    max_speed: number;//float \tThe maximum speed of this lat, in meters per second\n    moving_time: number;//integer \tThe lap's moving time, in seconds\n    name: string;//string \tThe name of the lap\n    pace_zone: number;//integer \tThe athlete's pace zone during this lap\n    split: number;//integer \tAn instance of integer.\n    start_date: string;//DateTime \tThe time at which the lap was started.\n    start_date_local: string; //DateTime \tThe time at which the lap was started in the local timezone.\n    total_elevation_gain: number;//float \t The elevation gain of this lap, in meters \n}\n\n/**\n * A collection of float objects. A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n */\nexport type TLatLng = [latitude: number, longitude: number];\n\n\nexport interface IMetaActivity {\n    id: number;//long \tThe unique identifier of the activity\n    visibility?: string | 'everyone';\n    resource_state?: number;\n}\n\nexport interface IMetaAthlete {\n    id?: number; //long The unique identifier of the athlete \n    resource_state?: number; // not in doc\n    firstname?: string; // not in doc\n    lastname?: string; // not in doc\n}\n\nexport interface IMetaClub {\n    id: number;//long \tThe club's unique identifier.\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    name: string;//string \tThe club's name. \n}\n\n// todo : check set of segments\nexport interface IExplorerResponse {\n    segments: IExplorerSegment[];// //ExplorerSegment \tThe set of segments matching an explorer request \n}\n\nexport interface IExplorerSegment {\n    id: number;//long \tThe unique identifier of this segment\n    resource_state?: number; // np\n    starred?: boolean; // np\n    elevation_profile?: string; // np\n    local_legend_enabled?: boolean; // np\n    name: string;//string \tThe name of this segment\n    climb_category: number;//integer \tThe category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.\n    climb_category_desc: string;//string \tThe description for the category of the climb May take one of the following values: NC, 4, 3, 2, 1, HC\n    avg_grade: number;//float \tThe segment's average grade, in percents\n    start_latlng: TLatLng; //LatLng \tAn instance of LatLng.\n    end_latlng: TLatLng;//LatLng \tAn instance of LatLng.\n    elev_difference: number;//float \tThe segments's evelation difference, in meters\n    distance: number;//float \tThe segment's distance, in meters\n    points: string; //string \tThe polyline of the segment \n}\n\nexport interface IPhotosSummary {\n    count: number; //integer \tThe number of photos\n    primary: IPhotosSummaryPrimary; //PhotosSummary_primary \tAn instance of PhotosSummary_primary. \n}\n\nexport interface IPhotosSummaryPrimary {\n    id: number;//long \tAn instance of long.\n    source: number; //integer \tAn instance of integer.\n    unique_id: string; //string \tAn instance of string.\n    urls: string;//string \tAn instance of string. \n}\n\n// why string for id this time? probably not the same db\nexport interface IPolylineMap {\n    id: string;//string \tThe identifier of the map\n    polyline: string; // string \tThe polyline of the map, only returned on detailed representation of an object\n    summary_polyline?: string; // string The summary polyline of the map  \t\n    resource_state?: number;\n}\n\nexport interface IPowerZoneRanges {\n    zones: IZoneRanges; //ZoneRanges \tAn instance of ZoneRanges. \n}\n\nexport interface IRoute {\n    athlete: ISummaryAthlete; //SummaryAthlete \tAn instance of SummaryAthlete.\n    description: string | null;//string \tThe description of the route\n    distance: number;//float \tThe route's distance, in meters\n    elevation_gain: number; //float \tThe route's elevation gain.\n    id: number;//long \tThe unique identifier of this route\n    id_str: string;//string \tThe unique identifier of the route in string format\n    map: IPolylineMap; //PolylineMap \tAn instance of PolylineMap.\n    map_urls?: { url: string, retina_url: string } // nd\n    resource_state?: number;// nd\n    name: string; //string \tThe name of this route\n    private: boolean; //boolean \tWhether this route is private\n    starred: boolean;//boolean \tWhether this route is starred by the logged-in athlete\n    timestamp: number;//integer \tAn epoch timestamp of when the route was created\n    type: number;//integer \tThis route's type (1 for ride, 2 for runs)\n    sub_type: number;//integer \tThis route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)\n    created_at: string;//DateTime \tThe time at which the route was created\n    updated_at: string; //DateTime \tThe time at which the route was last updated\n    estimated_moving_time: number; //integer \tEstimated time in seconds for the authenticated athlete to complete route\n    segments: ISummarySegment[]; //SummarySegment \tThe segments traversed by this route\n    waypoints: IWaypoint[];//Waypoint \tThe custom waypoints along this route \n}\n\nexport interface ISplit {\n    average_speed: number;//float \tThe average speed of this split, in meters per second\n    distance: number;//float \tThe distance of this split, in meters\n    elapsed_time: number;//integer \tThe elapsed time of this split, in seconds\n    elevation_difference: number; //float \tThe elevation difference of this split, in meters\n    pace_zone: number;//integer \tThe pacing zone of this split\n    moving_time: number;//integer \tThe moving time of this split, in seconds\n    split: number; //integer \tN/A\n}\n\ntype TSportType = 'AlpineSki' | 'BackcountrySki' | 'Badminton' | 'Canoeing' | 'Crossfit' | 'EBikeRide' | 'Elliptical' | 'EMountainBikeRide' | 'Golf' | 'GravelRide' | 'Handcycle' | 'HighIntensityIntervalTraining' | 'Hike' | 'IceSkate' | 'InlineSkate' | 'Kayaking' | 'Kitesurf' | 'MountainBikeRide' | 'NordicSki' | 'Pickleball' | 'Pilates' | 'Racquetball' | 'Ride' | 'RockClimbing' | 'RollerSki' | 'Rowing' | 'Run' | 'Sail' | 'Skateboard' | 'Snowboard' | 'Snowshoe' | 'Soccer' | 'Squash' | 'StairStepper' | 'StandUpPaddling' | 'Surfing' | 'Swim' | 'TableTennis' | 'Tennis' | 'TrailRun' | 'Velomobile' | 'VirtualRide' | 'VirtualRow' | 'VirtualRun' | 'Walk' | 'WeightTraining' | 'Wheelchair' | 'Windsurf' | 'Workout' | 'Yoga';\n\nexport interface ISummarySegment {\n    id: number;//long \tThe unique identifier of this segment\n    resource_state?: number; // np\n    elevation_profile?: null | any; // np\n    hazardous?: boolean; // np\n    starred?: boolean; // np\n    name: string;//string \tThe name of this segment\n    activity_type?: string; //string \tMay take one of the following values: Ride, Run\n    distance?: number;//float \tThe segment's distance, in meters\n    average_grade?: number;//float \tThe segment's average grade, in percents\n    maximum_grade?: number; //float \tThe segments's maximum grade, in percents\n    elevation_high?: number;//float \tThe segments's highest elevation, in meters\n    elevation_low?: number; //float \tThe segments's lowest elevation, in meters\n    start_latlng?: TLatLng; //LatLng \tAn instance of LatLng.\n    end_latlng?: TLatLng; //LatLng \tAn instance of LatLng.\n    climb_category?: number;// integer \tThe category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.\n    city?: string;//string \tThe segments's city.\n    state?: string;//string \tThe segments's state or geographical region.\n    country?: string;//string \tThe segment's country.\n    private?: boolean;//boolean \tWhether this segment is private.\n    athlete_pr_effort?: ISummaryPRSegmentEffort; // SummaryPRSegmentEffort \tAn instance of SummaryPRSegmentEffort.\n    athlete_segment_stats?: ISummarySegmentEffort; //SummarySegmentEffort \tAn instance of SummarySegmentEffort. \n    pr_time?: number;\n    starred_date?: string;\n}\n\nexport interface ISummarySegmentEffort {\n    id?: number;//long \tThe unique identifier of this effort\n    activity_id?: number;//long \tThe unique identifier of the activity related to this effort\n    elapsed_time?: number;//integer \tThe effort's elapsed time\n    start_date?: string; //DateTime \tThe time at which the effort was started.\n    start_date_local?: string; //DateTime \tThe time at which the effort was started in the local timezone.\n    distance?: number;//float \tThe effort's distance in meters\n    is_kom?: boolean; //boolean \t Whether this effort is the current best on the leaderboard \n\n    pr_elapsed_time?: number;\n    pr_date?: string;\n    pr_visibility?: string;\n    pr_activity_id?: number;\n    pr_activity_visibility?: string;\n    effort_count?: number;\n}\n\n//A collection of #/TimedZoneRange objects. Stores the exclusive ranges representing zones and the time spent in each.\ntype TTimedZoneDistribution = ITimedZoneRange[];\n\nexport interface IUpdatableActivity {\n    commute: boolean;//boolean \tWhether this activity is a commute\n    trainer: boolean;//boolean \tWhether this activity was recorded on a training machine\n    hide_from_home: boolean;//boolean \tWhether this activity is muted\n    description: string; //string \tThe description of the activity\n    name: string;//string \tThe name of the activity\n    type: TActivityType; //ActivityType \tDeprecated.Prefer to use sport_type.In a request where both type and sport_type are present, this field will be ignored\n    sport_type: TSportType; //SportType \tAn instance of SportType.\n    gear_id: string; //string \tIdentifier for the gear associated with the activity. ‘none’ clears gear from activity \n}\n\nexport interface IUpload {\n    id: number;//long \tThe unique identifier of the upload\n    id_str: string;//string \tThe unique identifier of the upload in string format\n    external_id: string;//string \tThe external identifier of the upload\n    error: string;//string \tThe error associated with this upload\n    status: string;//string \tThe status of this upload\n    activity_id: number;//long \tThe identifier of the activity this upload resulted into \n}\n\nexport interface IWaypoint {\n    latlng: TLatLng; //LatLng \tThe location along the route that the waypoint is closest to\n    target_latlng: TLatLng; //LatLng \tA location off of the route that the waypoint is (optional)\n    categories: string; // \tCategories that the waypoint belongs to\n    title: string; //string \tA title for the waypoint\n    description: string;//string \tA description of the waypoint (optional)\n    distance_into_route: number; //integer \tThe number meters along the route that the waypoint is located \n}\n\nexport interface IZoneRange {\n    min: number;// integer \tThe minimum value in the range.\n    max: number; //integer \tThe maximum value in the range. \n}\n\nexport type IZoneRanges = IZoneRange[];\n\nexport interface IZone {\n    heart_rate: IHeartRateZoneRanges;//HeartRateZoneRanges \tAn instance of HeartRateZoneRanges.\n    power?: IPowerZoneRanges;//PowerZoneRanges \tAn insta\n}\n\n\n\nexport interface IDetailedGear {\n    id: string; //string \tThe gear's unique identifier.\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"\n    primary: boolean;//boolean \tWhether this gear's is the owner's default one.\n    name: string;//string \tThe gear's name.\n    distance: number;//float \tThe distance logged with this gear.\n    brand_name: string; //string \tThe gear's brand name.\n    model_name: string; //string \tThe gear's model name.\n    frame_type: number;//integer \tThe gear's frame type (bike only).\n    description: string; //string \tThe gear's description. \n}\n\nexport interface IDetailedSegment {\n    id: number;//long \tThe unique identifier of this segment\n    resource_state?: number; // nd\n    elevation_profile?: string | null; // nd\n    starred?: boolean; // nd\n    name: string;//string \tThe name of this segment\n    activity_type: string;//string \tMay take one of the following values: Ride, Run\n    distance: number;//float \tThe segment's distance, in meters\n    average_grade: number;//float \tThe segment's average grade, in percents\n    maximum_grade: number;//float \tThe segments's maximum grade, in percents\n    elevation_high: number;//float \tThe segments's highest elevation, in meters\n    elevation_low: number;//float \tThe segments's lowest elevation, in meters\n    start_latlng: TLatLng;// LatLng \tAn instance of LatLng.\n    end_latlng: TLatLng; //LatLng \tAn instance of LatLng.\n    climb_category: number;// integer \tThe category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.\n    city: string; //string \tThe segments's city.\n    state: string; //string \tThe segments's state or geographical region.\n    country: string; //string \tThe segment's country.\n    private: boolean; //boolean \tWhether this segment is private.\n    athlete_pr_effort?: ISummaryPRSegmentEffort; //SummaryPRSegmentEffort \tAn instance of SummaryPRSegmentEffort.\n    athlete_segment_stats: ISummarySegmentEffort; //SummarySegmentEffort \tAn instance of SummarySegmentEffort.\n    created_at: string; //DateTime \tThe time at which the segment was created.\n    updated_at: string; //DateTime \tThe time at which the segment was last updated.\n    total_elevation_gain: number;//float \tThe segment's total elevation gain.\n    map: IPolylineMap; //PolylineMap \tAn instance of PolylineMap.\n    effort_count: number; //integer \tThe total number of efforts for this segment\n    athlete_count: number; //integer \tThe number of unique athletes who have an effort for this segment\n    hazardous: boolean;//boolean \tWhether this segment is considered hazardous\n    star_count: number; //integer \tThe number of stars for this segment \n    pr_time?: number;\n    xoms?: {\n        kom?: string;\n        qom?: string;\n        overall?: string;\n        destination?: {\n            href?: string;\n            type?: string;\n            name?: string;\n        }\n    },\n\n    local_legend?: {\n        athlete_id?: number;\n        title?: string;\n        profile?: string;\n        effort_description?: string,\n        effort_count?: string,\n        effort_counts?: { overall?: string, female?: string },\n        destination?: string;\n    }\n}\n\nexport interface IDetailedSegmentEffort {\n    id: number; //long \tThe unique identifier of this effort\n    resource_state?: number;\n    activity_id?: number;//long \tThe unique identifier of the activity related to this effort\n    elapsed_time?: number;//integer \tThe effort's elapsed time\n    start_date?: string; //DateTime \tThe time at which the effort was started.\n    start_date_local?: string;//DateTime \tThe time at which the effort was started in the local timezone.\n    distance?: number;//float \tThe effort's distance in meters\n    is_kom?: boolean;//boolean \tWhether this effort is the current best on the leaderboard\n    name?: string; //string \tThe name of the segment on which this effort was performed\n    activity?: IMetaActivity;//MetaActivity \tAn instance of MetaActivity.\n    athlete?: IMetaAthlete; //MetaAthlete \tAn instance of MetaAthlete.\n    moving_time?: number;//integer \tThe effort's moving time\n    start_index?: number;//integer \tThe start index of this effort in its activity's stream\n    end_index?: number;//integer \tThe end index of this effort in its activity's stream\n    average_cadence?: number;//float \tThe effort's average cadence\n    average_watts?: number;//float \tThe average wattage of this effort\n    device_watts?: boolean;//boolean \tFor riding efforts, whether the wattage was reported by a dedicated recording device\n    average_heartrate?: number;//float \tThe heart heart rate of the athlete during this effort\n    max_heartrate?: number;//float \tThe maximum heart rate of the athlete during this effort\n    segment?: ISummarySegment; //SummarySegment \tAn instance of SummarySegment.\n    kom_rank?: number | null;//integer \tThe rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload\n    pr_rank?: number;//integer \tThe rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload\n    hidden?: boolean;//boolean \tWhether this effort should be hidden when viewed within an activity \n    achievements?: any;\n    visibility?: any;\n}\n\nexport interface IGenericStream<T> {\n    original_size: number;//integer \tThe number of data points in this stream\n    resolution: string;//string \tThe level of detail (sampling) in which this stream was returned May take one of the following values: low, medium, high\n    series_type: string;  //string \tThe base series used in the case the stream was downsampled May take one of the following values: distance, time\n    data: T[];//float \tThe sequence of distance values for this stream, in meters \n}\n\nexport interface ITimeStream extends IGenericStream<number> { };\nexport interface IDistanceStream extends IGenericStream<number> { };\nexport interface IHeartrateStream extends IGenericStream<number> { };\nexport interface ILatLngStream extends IGenericStream<TLatLng> { };\nexport interface IMovingStream extends IGenericStream<boolean> { };\nexport interface IPowerStream extends IGenericStream<number> { };\nexport interface ISmoothGradeStream extends IGenericStream<number> { };\nexport interface ISmoothVelocityStream extends IGenericStream<number> { };\nexport interface IAltitudeStream extends IGenericStream<number> { };\nexport interface ICadenceStream extends IGenericStream<number> { };\nexport interface ITemperatureStream extends IGenericStream<number> { };\n\nexport type IStreamSet = {\n    time?: ITimeStream;//TimeStream \tAn instance of TimeStream.\n    distance?: IDistanceStream;//DistanceStream \tAn instance of DistanceStream.\n    latlng?: ILatLngStream; //LatLngStream \tAn instance of LatLngStream.\n    altitude?: IAltitudeStream; //AltitudeStream \tAn instance of AltitudeStream.\n    velocity_smooth?: ISmoothVelocityStream; //SmoothVelocityStream \tAn instance of SmoothVelocityStream.\n    heartrate?: IHeartrateStream;  //HeartrateStream \tAn instance of HeartrateStream.\n    cadence?: ICadenceStream; //CadenceStream \tAn instance of CadenceStream.\n    watts?: IPowerStream; //PowerStream \tAn instance of PowerStream.\n    temp?: ITemperatureStream; //TemperatureStream \tAn instance of TemperatureStream.\n    moving?: IMovingStream; //MovingStream \tAn instance of MovingStream.\n    grade_smooth?: ISmoothGradeStream; //SmoothGradeStream \tAn instance of SmoothGradeStream. \n}\n\n\nexport interface ISummaryActivity {\n    id: number;//long \tThe unique identifier of the activity\n    external_id: string;//string \tThe identifier provided at upload time\n    upload_id: number;//long \tThe identifier of the upload that resulted in this activity\n    athlete: IMetaAthlete; //MetaAthlete \tAn instance of MetaAthlete.\n    name: string; //string \tThe name of the activity\n    distance: number; //float \tThe activity's distance, in meters\n    moving_time: number;//integer \tThe activity's moving time, in seconds\n    elapsed_time: number;//integer \tThe activity's elapsed time, in seconds\n    total_elevation_gain: number;//float \tThe activity's total elevation gain.\n    elev_high: number;//float \tThe activity's highest elevation, in meters\n    elev_low: number; //float \tThe activity's lowest elevation, in meters\n    type: TActivityType;// ActivityType \tDeprecated. Prefer to use sport_type\n    sport_type: TSportType;// SportType \tAn instance of SportType.\n    start_date: string;//DateTime \tThe time at which the activity was started.\n    start_date_local: string;//DateTime \tThe time at which the activity was started in the local timezone.\n    timezone: string; //string \tThe timezone of the activity\n    start_latlng: TLatLng;// LatLng \tAn instance of LatLng.\n    end_latlng: TLatLng;//LatLng \tAn instance of LatLng.\n    achievement_count: number; //integer \tThe number of achievements gained during this activity\n    kudos_count: number;//integer \tThe number of kudos given for this activity\n    comment_count: number; //integer \tThe number of comments for this activity\n    athlete_count: number; //integer \tThe number of athletes for taking part in a group activity\n    photo_count: number;//integer \tThe number of Instagram photos for this activity\n    total_photo_count: number;//integer \tThe number of Instagram and Strava photos for this activity\n    map: IPolylineMap; //PolylineMap \tAn instance of PolylineMap.\n    trainer: boolean;//boolean \tWhether this activity was recorded on a training machine\n    commute: boolean;//boolean \tWhether this activity is a commute\n    manual: boolean;//boolean \tWhether this activity was created manually\n    private: boolean;//boolean \tWhether this activity is private\n    flagged: boolean;//boolean \tWhether this activity is flagged\n    workout_type: number;//integer \tThe activity's workout type\n    upload_id_str: string; //string \tThe unique identifier of the upload in string format\n    average_speed: number; //float \tThe activity's average speed, in meters per second\n    max_speed: number; //float \tThe activity's max speed, in meters per second\n    has_kudoed: boolean;//boolean \tWhether the logged-in athlete has kudoed this activity\n    hide_from_home: boolean;//boolean \tWhether the activity is muted\n    gear_id: string; //string \tThe id of the gear for the activity\n    kilojoules: number; //float \tThe total work done in kilojoules during this activity. Rides only\n    average_watts: number; //float \tAverage power output in watts during this activity. Rides only\n    device_watts: boolean; //boolean \tWhether the watts are from a power meter, false if estimated\n    max_watts: number;//integer \tRides with power meter data only\n    weighted_average_watts: number; //integer \tSimilar to Normalized Power. Rides with power meter data only \n}\n\nexport interface ISummaryAthlete {\n    id?: number;//long \tThe unique identifier of the athlete\n    username?: null | string;\n    bio?: null | string; // nd\n    badge_type_id?: number; // np\n    weight?: number; // nd\n    friend?: null | any; // nd\n    follower?: null | any; // nd\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    firstname: string;//string \tThe athlete's first name.\n    lastname: string; //string \tThe athlete's last name.\n    profile_medium?: string;//string \tURL to a 62x62 pixel profile picture.\n    profile?: string; //string \tURL to a 124x124 pixel profile picture.\n    city?: string | null;//string \tThe athlete's city.\n    state?: string | null; //string \tThe athlete's state or geographical region.\n    country?: string | null;//string \tThe athlete's country.\n    sex?: \"M\" | \"F\"; //string \tThe athlete's sex. May take one of the following values: M, F\n    premium?: boolean;//boolean \tDeprecated. Use summit field instead. Whether the athlete has any Summit subscription.\n    summit?: boolean;//boolean \tWhether the athlete has any Summit subscription.\n    created_at?: string; //DateTime \tThe time at which the athlete was created.\n    updated_at?: string; //DateTime \tThe time at which the athlete was last updated. \n}\n\nexport interface ISummaryClub {\n    id: number;//long \tThe club's unique identifier.\n    profile: string; // not in\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    name: string;//string \tThe club's name.\n    profile_medium: string; //string \tURL to a 60x60 pixel profile picture.\n    cover_photo: string | null;//string | null ni \tURL to a ~1185x580 pixel cover photo.\n    cover_photo_small: string | null;//string | null ni \tURL to a ~360x176 pixel cover photo.\n    sport_type?: string;//string \tDeprecated. Prefer to use activity_types. May take one of the following values: cycling, running, triathlon, other\n    activity_types: TActivityType[];// ActivityType \tThe activity types that count for a club. This takes precedence over sport_type.\n    activity_types_icon: string; // not in\n    dimensions: string[]; // not in\n    localized_sport_type: string | \"Multysport\"; // not in\n    city: string;//string \tThe club's city.\n    state: string;//string \tThe club's state or geographical region.\n    country: string; //string \tThe club's country.\n    private: boolean;//boolean \tWhether the club is private.\n    member_count: number;//integer \tThe club's member count.\n    featured: boolean;//boolean \tWhether the club is featured or not.\n    verified: boolean;//boolean \tWhether the club is verified or not.\n    url: string;//string \tThe club's vanity URL. \n}\n\n\n\n/**\n * A union type representing the time spent in a given zone.\n */\nexport interface ITimedZoneRange {\n    min: number;//integer \tThe minimum value in the range.\n    max: number;//integer \tThe maximum value in the range.\n    time: number;//integer \tThe number of seconds spent in this zone \n}\n\nexport interface IDetailedActivity {\n    id: number;//long \tThe unique identifier of the activity\n    external_id: string;//string \tThe identifier provided at upload time\n    upload_id: number;//long \tThe identifier of the upload that resulted in this activity\n    athlete: IMetaAthlete;//MetaAthlete \tAn instance of MetaAthlete.\n    name: string;//string \tThe name of the activity\n    distance: number;//float \tThe activity's distance, in meters\n    moving_time: number;//integer \tThe activity's moving time, in seconds\n    elapsed_time: number;//integer \tThe activity's elapsed time, in seconds\n    total_elevation_gain: number;//float \tThe activity's total elevation gain.\n    elev_high: number;//float \tThe activity's highest elevation, in meters\n    elev_low: number;//float \tThe activity's lowest elevation, in meters\n    type?: TActivityType;// ActivityType \tDeprecated. Prefer to use sport_type\n    sport_type: TSportType;// SportType \tAn instance of SportType.\n    start_date: string; //DateTime \tThe time at which the activity was started.\n    start_date_local: string;//DateTime \tThe time at which the activity was started in the local timezone.\n    timezone: string; //string \tThe timezone of the activity\n    start_latlng: TLatLng; //LatLng \tAn instance of LatLng.\n    end_latlng: TLatLng;// LatLng \tAn instance of LatLng.\n    achievement_count: number;//integer \tThe number of achievements gained during this activity\n    kudos_count: number;//integer \tThe number of kudos given for this activity\n    comment_count: number;//integer \tThe number of comments for this activity\n    athlete_count: number;//integer \tThe number of athletes for taking part in a group activity\n    photo_count: number;//integer \tThe number of Instagram photos for this activity\n    total_photo_count: number;//integer \tThe number of Instagram and Strava photos for this activity\n    map: IPolylineMap; //PolylineMap \tAn instance of PolylineMap.\n    trainer: boolean;// boolean \tWhether this activity was recorded on a training machine\n    commute: boolean;//boolean \tWhether this activity is a commute\n    manual: boolean; //boolean \tWhether this activity was created manually\n    private: boolean;//boolean \tWhether this activity is private\n    flagged: boolean;//boolean \tWhether this activity is flagged\n    workout_type: number;//integer \tThe activity's workout type\n    upload_id_str: string; //string \tThe unique identifier of the upload in string format\n    average_speed: number;//float \tThe activity's average speed, in meters per second\n    max_speed: number;//float \tThe activity's max speed, in meters per second\n    has_kudoed: boolean;//boolean \tWhether the logged-in athlete has kudoed this activity\n    hide_from_home: boolean;//boolean \tWhether the activity is muted\n    gear_id: string; //string \tThe id of the gear for the activity\n    kilojoules: number;//float \tThe total work done in kilojoules during this activity. Rides only\n    average_watts: number;//float \tAverage power output in watts during this activity. Rides only\n    device_watts: boolean; //boolean \tWhether the watts are from a power meter, false if estimated\n    max_watts: number;//integer \tRides with power meter data only\n    weighted_average_watts: number;//integer \tSimilar to Normalized Power. Rides with power meter data only\n    description: string;//string \tThe description of the activity\n    photos: IPhotosSummary; //PhotosSummary \tAn instance of PhotosSummary.\n    gear: ISummaryGear; //SummaryGear \tAn instance of SummaryGear.\n    calories: number;//float \tThe number of kilocalories consumed during this activity\n    segment_efforts: IDetailedSegmentEffort; //DetailedSegmentEffort \tA collection of DetailedSegmentEffort objects.\n    device_name: string;//string \tThe name of the device used to record the activity\n    embed_token: string;//string \tThe token used to embed a Strava activity\n    splits_metric: ISplit; //Split \tThe splits of this activity in metric units (for runs)\n    splits_standard: ISplit;// Split \tThe splits of this activity in imperial units (for runs)\n    laps: ILap[]; //Lap \tA collection of Lap objects.\n    best_efforts: IDetailedSegmentEffort //DetailedSegmentEffort \tA collection of DetailedSegmentEffort objects. \n}\n\nexport interface IDetailedAthlete {\n    id: number;//long \tThe unique identifier of the athlete\n    username: string | null;// not defined inside doc\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    firstname: string; //string \tThe athlete's first name.\n    lastname: string;//string \tThe athlete's last name.\n    bio: string | null;\n    profile_medium: string;//string \tURL to a 62x62 pixel profile picture.\n    profile: string; //string \tURL to a 124x124 pixel profile picture.\n    city: string;//string \tThe athlete's city.\n    state: string; //string \tThe athlete's state or geographical region.\n    country: string | null;//string \tThe athlete's country.\n    sex: \"M\" | \"F\";// string \tThe athlete's sex. May take one of the following values: M, F\n    premium: boolean;//boolean \tDeprecated. Use summit field instead. Whether the athlete has any Summit subscription.\n    summit: boolean; //boolean \tWhether the athlete has any Summit subscription.\n    created_at: string;//DateTime \tThe time at which the athlete was created.\n    updated_at: string; //DateTime \tThe time at which the athlete was last updated.\n    badge_type_id: null | number;\n    friend: any | null; // ?????\n    follower: any | null; // ????\n    follower_count?: number;//integer \tThe athlete's follower count.\n    friend_count?: number;//integer \tThe athlete's friend count.\n    measurement_preference?: string; //string \tThe athlete's preferred unit system. May take one of the following values: feet, meters\n    ftp?: number;//integer \tThe athlete's FTP (Functional Threshold Power).\n    weight: number;//float \tThe athlete's weight.\n    clubs?: ISummaryClub; //SummaryClub \tThe athlete's clubs.\n    bikes?: ISummaryGear;//SummaryGear \tThe athlete's bikes.\n    shoes?: ISummaryGear;// SummaryGear \tThe athlete's shoes. \n}\n\nexport interface IDetailedClub {\n    id: number;//long \tThe club's unique identifier.\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    name: string;//string \tThe club's name.\n    profile_medium: string;//string \tURL to a 60x60 pixel profile picture.\n    cover_photo: string;//string \tURL to a ~1185x580 pixel cover photo.\n    cover_photo_small: string; //string \tURL to a ~360x176 pixel cover photo.\n    sport_type: string; //string \tDeprecated. Prefer to use activity_types. May take one of the following values: cycling, running, triathlon, other\n    activity_types: TActivityType[]; //ActivityType \tThe activity types that count for a club. This takes precedence over sport_type.\n    profile: string; // doc no present\n    activity_types_icon: string; // doc no present\n    dimensions: string[]; // doc no present\n    description: string; // doc no present\n    club_type: string; // doc no present\n    website: string; // doc no present\n    localized_sport_type: string;\n    city: string; //string \tThe club's city.\n    state: string; //string \tThe club's state or geographical region.\n    country: string; //string \tThe club's country.\n    private: boolean;//boolean \tWhether the club is private.\n    member_count: number;//integer \tThe club's member count.\n    featured: boolean; //boolean \tWhether the club is featured or not.\n    verified: boolean;//boolean \tWhether the club is verified or not.\n    url: string; //string \tThe club's vanity URL.\n    membership: string; //string \tThe membership status of the logged-in athlete. May take one of the following values: member, pending\n    admin: boolean; //boolean \tWhether the currently logged-in athlete is an administrator of this club.\n    owner: boolean; //boolean \tWhether the currently logged-in athlete is the owner of this club.\n    following_count: number;//integer \tThe number of athletes in the club that the logged-in athlete follows. \n}\n\nexport interface IAthlete {\n    id: number; //long \tThe unique identifier of the athlete\n    resource_state: 1 | 2 | 3; //Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"\n    firstname: string; //string \tThe athlete's first name.\n    lastname: string; //string \tThe athlete's last name.\n    profile_medium: string; //string \tURL to a 62x62 pixel profile picture.\n    profile: string; // string \tURL to a 124x124 pixel profile picture.\n    city: string; //string \tThe athlete's city.\n    state: string;// \tstring : The athlete's state or geographical region.\n    country: string; //string \tThe athlete's country.\n    sex: \"M\" | \"F\"; //string \tThe athlete's sex. May take one of the following values: M, F\n    premium: boolean; //boolean \tDeprecated. Use summit field instead. Whether the athlete has any Summit subscription.\n    summit: boolean; //boolean \tWhether the athlete has any Summit subscription.\n    created_at: string;//DateTime(string) \tThe time at which the athlete was created.\n    updated_at: string; //DateTime \tThe time at which the athlete was last updated.\n    follower_count: number; //integer \tThe athlete's follower count.\n    friend_count: number;//integer \tThe athlete's friend count.\n    measurement_preference: string;//string \tThe athlete's preferred unit system. May take one of the following values: feet, meters\n    ftp?: number;//integer \tThe athlete's FTP (Functional Threshold Power).\n    weight: number; //float \tThe athlete's weight.\n\n    clubs?: ISummaryClub; //SummaryClub \tThe athlete's clubs.\n    bikes?: ISummaryGear;//SummaryGear \tThe athlete's bikes.\n    shoes?: ISummaryGear; //SummaryGear \tThe athlete's shoes. \n}\n\nexport interface ISummaryGear {\n    id: string;//string \tThe gear's unique identifier.\n    resource_state: number;//integer \tResource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"\n    primary: boolean;//boolean \tWhether this gear's is the owner's default one.\n    name: string; //string \tThe gear's name.\n    distance: number;//    float \tThe distance logged with this gear. \n}\n\nexport interface IComment {\n    id: number;//long \tThe unique identifier of this comment\n    post_id?: null | number; // np\n    resource_state?: number; // np\n    mentions_metadata?: null | string; // np\n    cursor?: null | string; // np\n    reaction_count?: null | number; // np\n    has_reacted?: boolean | null;\n    activity_id: number;//long \tThe identifier of the activity this comment is related to\n    text: string; //string \tThe content of the comment\n    athlete: ISummaryAthlete; //SummaryAthlete \tAn instance of SummaryAthlete.\n    created_at: string;//DateTime \tThe time at which this comment was created. \n}"],"mappings":"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","names":["resp"]}